@CMAKE_PROJECT_NAME@ @GHOST_VERSION@ API documentation  {#mainpage}
======================================================

<img src="ghost_logo.svg" alt="GHOST logo" style="width: 100px;float: right"/>

This Doxygen documentation has been created with the following GHOST settings:

Feature                | Enabled                   |
---------------------- | ------------------------- |
64-bit indices         | @GHOST_HAVE_LONGIDX@      |
CUDA                   | @GHOST_HAVE_CUDA@         |
Timing instrumentation | @GHOST_HAVE_INSTR_TIMING@ |
Likwid instrumentation | @GHOST_HAVE_INSTR_LIKWID@ |

Minimal code example
--------------------

The following code example performs a sparse matrix-vector multiplication with a diagonal matrix.

~~~{.c}
#define N 4
GHOST_REGISTER_DT_D(mydata)

static int diag(ghost_idx_t row, ghost_idx_t *rowlen, ghost_idx_t *col, void *val)
{
    *rowlen = 1;
    col[0] = row;
    ((mydata_t *)val)[0] = (mydata_t)(row+1);
    
    return 0;
}

int main() 
{
    ghost_context_t *ctx;
    ghost_sparsemat_t *A;
    ghost_densemat_t *y, *x;
    double zero = 0.;
    
    ghost_sparsemat_traits_t mtraits = GHOST_SPARSEMAT_TRAITS_INITIALIZER;
    ghost_densemat_traits_t vtraits = GHOST_DENSEMAT_TRAITS_INITIALIZER;
    ghost_spmv_flags_t spmvflags = GHOST_SPMV_DEFAULT; // we want to perform y = A*x

    ghost_context_create(&ctx,N,N,GHOST_CONTEXT_DEFAULT,diag,GHOST_SPARSEMAT_SRC_FUNC,MPI_COMM_WORLD,1.);
    ghost_sparsemat_create(&A, &mtraits, 1);
    ghost_densemat_create(&x, vtraits);
    ghost_densemat_create(&y, vtraits);

    x->fromRand(x); // x = random
    y->fromScalar(z,&zero); // y = 0
        
    ghost_sparsemat_create(&mat,ctx,&mtraits,1);
    ghost_sparsemat_src_rowfunc_t matsrc = GHOST_SPARSEMAT_SRC_ROWFUNC_INITIALIZER;
    matsrc.func = diag;
    matsrc.maxrowlen = N;
    A->fromRowFunc(mat,&src);

    ghost_spmv(y,A,x,spmvflags);
    
    char *Astr, *xstr, *ystr;
    A->string(A,&Astr,1);
    x->string(x,&xstr);
    y->string(y,&ystr);

    printf("%s=\n%s\n*\n%s\n",ystr,Astr,xstr);
    free(Astr, xstr, ystr);

    return 0;
}
~~~

