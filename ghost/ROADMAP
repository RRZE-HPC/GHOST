Version 0.3

- first implementation of optionally asynchronous offload mechanism 
	(test case: task mode spMVM kernel)
	- pthread_create-like call to start thread (supplying a function and a void pointer, returning handle)
	- use OpenMP threads for now
		+ bitfield: GHOST_THREAD_ASYNC/_SYNC
		+ function pointer
		+ void pointer
		+ string about what's done
		+ return: integer (handle), unimport of sync
		+ if SYNC: just call 

	- problem: ghost_spawn cannot return for only one thread if it spawns two threads
	- pure OpenMP seems impossible
	- check whether it is safe and reliable to have an openmp parallel region inside a spawned pthread
	- add another layer of abstraction, setting the flag when then lower function (the one calling pthread_create) has returned

- add shift to matrix and apply at spMVM, option: GHOST_SPM_(NO)SHIFT
(- threaded incomplete factorization)
- sparse matrix addition with a pre-factor
	special x-macro versions for +/-1
- GitLab or something similar
- vec->fromFunc: add a version where the loop is in the user-defined function
	also: global instead of local index
- instrumentation: prefix all region names with a number according to the level of instrumentation


Version 0.4

- generalization of intrinsics kernels for arbitrary data types as far as possible
- build once with AVX, SSE, CUDA etc. and detect at runtime which one to use
- enable MPI with 64-bit indices


Version x.x

- support of special matrix structures
