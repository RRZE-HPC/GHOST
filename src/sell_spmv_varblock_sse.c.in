/*!GHOST_AUTOGEN CHUNKHEIGHT */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/sell.h"
#include "ghost/util.h"
#include "ghost/instr.h"
#include "ghost/machine.h"
#include "ghost/omp.h"
#include "ghost/sell_spmv_varblock_sse_gen.h"
#include <immintrin.h>

#GHOST_SUBST CHUNKHEIGHT ${CHUNKHEIGHT}

ghost_error ghost_sellspmv__a_sse_d_d_cm_CHUNKHEIGHT_x(ghost_sparsemat *mat, ghost_densemat* res, ghost_densemat* invec, ghost_spmv_flags spmvmOptions,va_list argp)
{
#if defined(GHOST_HAVE_SSE) && CHUNKHEIGHT>=2
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    
    ghost_lidx i;
    double *lval = NULL, *rval = NULL;
    double *mval = (double *)SELL(mat)->val;
    double *local_dot_product = NULL;
    double *partsums = NULL;
    
    double sscale = 1., sbeta = 1.;
    double *sshift = NULL;
    __m128d shift, scale, beta;
    double sdelta = 0., seta = 0.;
    ghost_densemat *z = NULL;

    GHOST_SPMV_PARSE_ARGS(spmvmOptions,argp,sscale,sbeta,sshift,local_dot_product,z,sdelta,seta,double,double);
    scale = _mm_load1_pd(&sscale);
    beta = _mm_load1_pd(&sbeta);

    int nthreads = 1;
    unsigned clsize;
    ghost_machine_cacheline_size(&clsize);
    int padding = (int)clsize/sizeof(double);
    if (spmvmOptions & GHOST_SPMV_DOT) {

#pragma omp parallel 
        {
#pragma omp single
            nthreads = ghost_omp_nthread();
        }

        GHOST_CALL_RETURN(ghost_malloc((void **)&partsums,(3*invec->traits.ncols+padding)*nthreads*sizeof(double))); 
        for (i=0; i<(3*invec->traits.ncols+padding)*nthreads; i++) {
            partsums[i] = 0.;
        }
    }

#pragma omp parallel private(shift) shared(partsums)
    {
        ghost_lidx j,c,v;
        ghost_lidx offs;
        __m128d val;
        __m128d rhs;
        #GHOST_UNROLL#__m128d tmp@;#CHUNKHEIGHT/2
        int tid = ghost_omp_threadnum();
        __m128d dot1[invec->traits.ncols],dot2[invec->traits.ncols],dot3[invec->traits.ncols];
        for (v=0; v<invec->traits.ncols; v++) {
            dot1[v] = _mm_setzero_pd();
            dot2[v] = _mm_setzero_pd();
            dot3[v] = _mm_setzero_pd();
        }
        for (v=0; v<invec->traits.ncols; v++)
        {
#pragma omp for schedule(runtime)
            for (c=0; c<mat->nrowsPadded/CHUNKHEIGHT; c++) 
            { // loop over chunks

                #GHOST_UNROLL#tmp@ = _mm_setzero_pd();#CHUNKHEIGHT/2
                lval = (double *)res->val+v*res->stride;
                rval = (double *)invec->val+v*invec->stride;
                offs = SELL(mat)->chunkStart[c];

                for (j=0; j<(SELL(mat)->chunkStart[c+1]-SELL(mat)->chunkStart[c])/CHUNKHEIGHT; j++) 
                { // loop inside chunk

                    #GHOST_UNROLL#val = _mm_load_pd(&mval[offs]);rhs = _mm_loadl_pd(rhs,&rval[(SELL(mat)->col[offs++])]);rhs = _mm_loadh_pd(rhs,&rval[(SELL(mat)->col[offs++])]);tmp@ = _mm_add_pd(tmp@,_mm_mul_pd(val,rhs));#CHUNKHEIGHT/2
                }

                if (spmvmOptions & (GHOST_SPMV_SHIFT | GHOST_SPMV_VSHIFT)) {
                    if (spmvmOptions & GHOST_SPMV_SHIFT) {
                        shift = _mm_load1_pd(&sshift[0]);
                    } else {
                        shift = _mm_loadu_pd(&sshift[v]);
                    }
                    #GHOST_UNROLL#tmp@ = _mm_sub_pd(tmp@,_mm_mul_pd(shift,_mm_load_pd(&rval[(c*CHUNKHEIGHT)+(2*@)])));#CHUNKHEIGHT/2
                }
                if (spmvmOptions & GHOST_SPMV_SCALE) {
                    #GHOST_UNROLL#tmp@ = _mm_mul_pd(scale,tmp@);#CHUNKHEIGHT/2
                }
                if (spmvmOptions & GHOST_SPMV_AXPY) {
                    #GHOST_UNROLL#_mm_store_pd(&lval[(c*CHUNKHEIGHT)+(2*@)],_mm_add_pd(tmp@,_mm_load_pd(&lval[(c*CHUNKHEIGHT)+(2*@)])));#CHUNKHEIGHT/2
                } else if (spmvmOptions & GHOST_SPMV_AXPBY) {
                    #GHOST_UNROLL#_mm_store_pd(&lval[(c*CHUNKHEIGHT)+(2*@)],_mm_add_pd(tmp@,_mm_mul_pd(beta,_mm_load_pd(&lval[(c*CHUNKHEIGHT)+(2*@)]))));#CHUNKHEIGHT/2
                } else {
                    #GHOST_UNROLL#_mm_stream_pd(&lval[(c*CHUNKHEIGHT)+(2*@)],tmp@);#CHUNKHEIGHT/2
                }

                if (spmvmOptions & GHOST_SPMV_DOT) {
                    if ((c+1)*CHUNKHEIGHT <= mat->nrows) {
                        #GHOST_UNROLL#dot1[v] = _mm_add_pd(dot1[v],_mm_mul_pd(_mm_load_pd(&lval[(c*CHUNKHEIGHT)+(2*@)]),_mm_load_pd(&lval[(c*CHUNKHEIGHT)+2*@])));#CHUNKHEIGHT/2
                        #GHOST_UNROLL#dot2[v] = _mm_add_pd(dot2[v],_mm_mul_pd(_mm_load_pd(&rval[(c*CHUNKHEIGHT)+(2*@)]),_mm_load_pd(&lval[(c*CHUNKHEIGHT)+2*@])));#CHUNKHEIGHT/2
                        #GHOST_UNROLL#dot3[v] = _mm_add_pd(dot3[v],_mm_mul_pd(_mm_load_pd(&rval[(c*CHUNKHEIGHT)+(2*@)]),_mm_load_pd(&rval[(c*CHUNKHEIGHT)+2*@])));#CHUNKHEIGHT/2
                    } else {
                        ghost_lidx rem;
                        for (rem=0; rem<mat->nrows-c*CHUNKHEIGHT; rem++) {
                            partsums[((padding+3*invec->traits.ncols)*tid)+3*v+0] += lval[c*CHUNKHEIGHT+rem]*lval[c*CHUNKHEIGHT+rem];
                            partsums[((padding+3*invec->traits.ncols)*tid)+3*v+1] += lval[c*CHUNKHEIGHT+rem]*rval[c*CHUNKHEIGHT+rem];
                            partsums[((padding+3*invec->traits.ncols)*tid)+3*v+2] += rval[c*CHUNKHEIGHT+rem]*rval[c*CHUNKHEIGHT+rem];
                        }
                    }
                }
            }
        }

        if (spmvmOptions & GHOST_SPMV_DOT) {
            __m128d hsum;
            for (v=0; v<invec->traits.ncols; v++) {

                hsum = _mm_hadd_pd(dot1[v],dot2[v]);
                partsums[((padding+3*invec->traits.ncols)*tid)+3*v+0] += ((double *)&hsum)[0];
                partsums[((padding+3*invec->traits.ncols)*tid)+3*v+1] += ((double *)&hsum)[1];

                hsum = _mm_hadd_pd(dot3[v],dot3[v]);
                partsums[((padding+3*invec->traits.ncols)*tid)+3*v+2] += ((double *)&hsum)[0];
            }
        }
    }
    if (spmvmOptions & GHOST_SPMV_DOT) {
        if (!local_dot_product) {
            WARNING_LOG("The location of the local dot products is NULL. Will not compute them!");
            return GHOST_SUCCESS;
        }
        ghost_lidx v;
        for (v=0; v<invec->traits.ncols; v++) {
            local_dot_product[v                       ] = 0.; 
            local_dot_product[v  +   invec->traits.ncols] = 0.;
            local_dot_product[v  + 2*invec->traits.ncols] = 0.;
            for (i=0; i<nthreads; i++) {
                local_dot_product[v                       ] += partsums[(padding+3*invec->traits.ncols)*i + 3*v + 0];
                local_dot_product[v  +   invec->traits.ncols] += partsums[(padding+3*invec->traits.ncols)*i + 3*v + 1];
                local_dot_product[v  + 2*invec->traits.ncols] += partsums[(padding+3*invec->traits.ncols)*i + 3*v + 2];
            }
        }
        free(partsums);
    }
    if (spmvmOptions & GHOST_SPMV_CHAIN_AXPBY) {
        PERFWARNING_LOG("AXPBY will not be done on-the-fly!");
        z->axpby(z,res,&seta,&sdelta);
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
#else
    UNUSED(mat);
    UNUSED(res);
    UNUSED(invec);
    UNUSED(spmvmOptions);
    UNUSED(argp);
#endif
    return GHOST_SUCCESS;
}

ghost_error ghost_sellspmvDEFUNC__a_sse_d_d_rm_CHUNKHEIGHT_x(ghost_sparsemat *mat, ghost_densemat* res, ghost_densemat* invec, ghost_spmv_flags spmvmOptions,va_list argp)
{
#ifdef GHOST_HAVE_SSE
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    
    ghost_lidx j,c,col;
    ghost_lidx offs;
    double *mval = (double *)SELL(mat)->val;
    double *local_dot_product = NULL;
    double *partsums = NULL;
    __m128d rhs;
    int nthreads = 1, i;
    
    unsigned clsize;
    ghost_machine_cacheline_size(&clsize);
    int padding = (int)clsize/sizeof(double);
    int axpy = spmvmOptions & (GHOST_SPMV_AXPY | GHOST_SPMV_AXPBY);
    int ncolspadded = PAD(invec->traits.ncols,2);

    double sscale = 1., sbeta = 1.;
    double *sshift = NULL;
    __m128d shift, scale, beta;
    double sdelta = 0., seta = 0.;
    ghost_densemat *z = NULL;

    GHOST_SPMV_PARSE_ARGS(spmvmOptions,argp,sscale,sbeta,sshift,local_dot_product,z,sdelta,seta,double,double);
    scale = _mm_load1_pd(&sscale);
    beta = _mm_load1_pd(&sbeta);
    
    if (spmvmOptions & GHOST_SPMV_DOT) {

#pragma omp parallel 
        {
#pragma omp single
            nthreads = ghost_omp_nthread();
        }

        GHOST_CALL_RETURN(ghost_malloc((void **)&partsums,(3*PAD(invec->traits.ncols,2)+padding)*nthreads*sizeof(double))); 
        for (col=0; col<(3*PAD(invec->traits.ncols,2)+padding)*nthreads; col++) {
            partsums[col] = 0.;
        }
    }

#pragma omp parallel private(shift,c,j,offs,rhs,col) shared (partsums)
    {
        int tid = ghost_omp_threadnum();
        #GHOST_UNROLL#__m128d tmp@;#CHUNKHEIGHT
        double *tmpresult = NULL;
        if (!axpy && ncolspadded>2) {
            ghost_malloc_align((void **)&tmpresult,sizeof(double)*CHUNKHEIGHT*ncolspadded,128);
        }

        ghost_lidx donecols;

#pragma omp for schedule(runtime)
        for (c=0; c<mat->nrowsPadded/CHUNKHEIGHT; c++) 
        { // loop over chunks
            double *lval = (double *)res->val+c*CHUNKHEIGHT*res->stride;
            double *rval = (double *)invec->val+c*CHUNKHEIGHT*invec->stride;

            for (donecols = 0; donecols < ncolspadded; donecols+=2) {
                #GHOST_UNROLL#tmp@ = _mm_setzero_pd();#CHUNKHEIGHT
                offs = SELL(mat)->chunkStart[c];

                for (j=0; j<SELL(mat)->chunkLen[c]; j++) { // loop inside chunk
                    #GHOST_UNROLL#rhs = _mm_load_pd((double *)invec->val+SELL(mat)->col[offs]*invec->stride+donecols);tmp@ = _mm_add_pd(tmp@,_mm_mul_pd(_mm_load1_pd(&mval[offs++]),rhs));#CHUNKHEIGHT
                }
              
                if (spmvmOptions & (GHOST_SPMV_SHIFT | GHOST_SPMV_VSHIFT)) {
                    if (spmvmOptions & GHOST_SPMV_SHIFT) {
                        shift = _mm_load1_pd(&sshift[0]);
                    } else {
                        shift = _mm_loadu_pd(&sshift[donecols]);
                    }
                    #GHOST_UNROLL#tmp@ = _mm_sub_pd(tmp@,_mm_mul_pd(shift,_mm_load_pd((double *)invec->val+((c*CHUNKHEIGHT)+@)*invec->stride+donecols)));#CHUNKHEIGHT
                }
                if (spmvmOptions & GHOST_SPMV_SCALE) {
                    #GHOST_UNROLL#tmp@ = _mm_mul_pd(scale,tmp@);#CHUNKHEIGHT
                }
                if (axpy || ncolspadded<=2 || CHUNKHEIGHT == 1) {
                    if (spmvmOptions & GHOST_SPMV_AXPY) {
                        #GHOST_UNROLL#_mm_store_pd(&lval[res->stride*@+donecols],_mm_add_pd(tmp@,_mm_load_pd(&lval[res->stride*@+donecols])));#CHUNKHEIGHT
                    } else if (spmvmOptions & GHOST_SPMV_AXPBY) {
                        #GHOST_UNROLL#_mm_store_pd(&lval[res->stride*@+donecols],_mm_add_pd(tmp@,_mm_mul_pd(_mm_load_pd(&lval[res->stride*@+donecols]),beta)));#CHUNKHEIGHT
                    } else {
                        #GHOST_UNROLL#_mm_stream_pd(&lval[res->stride*@+donecols],tmp@);#CHUNKHEIGHT
                    }
                    if (spmvmOptions & GHOST_SPMV_DOT) {
                        for (col = donecols; col<donecols+2; col++) {
                                #GHOST_UNROLL#partsums[((padding+3*PAD(invec->traits.ncols,2))*tid)+3*col+0] += lval[col+@*res->stride]*lval[col+@*res->stride];#CHUNKHEIGHT
                                #GHOST_UNROLL#partsums[((padding+3*PAD(invec->traits.ncols,2))*tid)+3*col+1] += lval[col+@*res->stride]*rval[col+@*invec->stride];#CHUNKHEIGHT
                                #GHOST_UNROLL#partsums[((padding+3*PAD(invec->traits.ncols,2))*tid)+3*col+2] += rval[col+@*invec->stride]*rval[col+@*invec->stride];#CHUNKHEIGHT
                        }
                    }
                } else {
                    #GHOST_UNROLL#_mm_store_pd(&tmpresult[@*ncolspadded+donecols],tmp@);#CHUNKHEIGHT
                    // TODO if non-AXPY cxompute DOT from tmp instead of lval
                }

            }
            if (!axpy && ncolspadded>2 && CHUNKHEIGHT != 1) {
                #GHOST_UNROLL#for (donecols = 0; donecols < ncolspadded; donecols+=2) {tmp@ = _mm_load_pd(&tmpresult[@*ncolspadded+donecols]); _mm_stream_pd(&lval[@*res->stride+donecols],tmp@);}#CHUNKHEIGHT
            }
        }
        free(tmpresult);
    }
    if (spmvmOptions & GHOST_SPMV_DOT) {
        if (!local_dot_product) {
            WARNING_LOG("The location of the local dot products is NULL. Will not compute them!");
            return GHOST_SUCCESS;
        }
        for (col=0; col<invec->traits.ncols; col++) {
            local_dot_product[col                       ] = 0.; 
            local_dot_product[col  +   invec->traits.ncols] = 0.;
            local_dot_product[col  + 2*invec->traits.ncols] = 0.;
            for (i=0; i<nthreads; i++) {
                local_dot_product[col                         ] += partsums[(padding+3*PAD(invec->traits.ncols,2))*i + 3*col + 0];
                local_dot_product[col  +   invec->traits.ncols] += partsums[(padding+3*PAD(invec->traits.ncols,2))*i + 3*col + 1];
                local_dot_product[col  + 2*invec->traits.ncols] += partsums[(padding+3*PAD(invec->traits.ncols,2))*i + 3*col + 2];
            }
        }
        free(partsums);
    }
    if (spmvmOptions & GHOST_SPMV_CHAIN_AXPBY) {
        PERFWARNING_LOG("AXPBY will not be done on-the-fly!");
        z->axpby(z,res,&seta,&sdelta);
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
#else
    UNUSED(mat);
    UNUSED(res);
    UNUSED(invec);
    UNUSED(spmvmOptions);
    UNUSED(argp);
#endif
    return GHOST_SUCCESS;
}
