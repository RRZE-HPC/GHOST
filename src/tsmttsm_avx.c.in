#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/math.h"
#include "ghost/instr.h"
#include "ghost/locality.h"
#include "ghost/util.h"
#include "ghost/tsmttsm_avx_gen.h"
#include <immintrin.h>


#GHOST_FUNC_BEGIN#CFGK=${CFG_BLOCKVECTOR_SIZES}#CFGM=${CFG_BLOCKVECTOR_SIZES}
ghost_error_t ghost_tsmttsm__avx_d_CFGK_CFGM_cm_rm(ghost_densemat_t *x, ghost_densemat_t *v, ghost_densemat_t *w, void *alpha, void *beta, int conmv)
{
    UNUSED(conmv);
#ifdef GHOST_HAVE_AVX
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error_t ret = GHOST_SUCCESS;

    int myrank=0;

    if (v->context) {
        GHOST_CALL_GOTO(ghost_rank(&myrank,v->context->mpicomm),err,ret);
    }

    ghost_lidx_t n = v->traits.nrows;
    INFO_LOG("In AVX TSMTTSM with two fixed block sizes [CFGK][CFGM] %dx%d <- %dx%d * %dx%d",CFGM,CFGK,CFGM,n,n,CFGK);
    
    double * restrict vval = NULL, * restrict wval = NULL, * restrict xval;
    ghost_lidx_t ldv, ldw, ldx;

    ldv = v->stride;
    ldw = w->stride;
    ldx = x->stride;

    ghost_densemat_valptr(v,(void **)&vval);
    ghost_densemat_valptr(w,(void **)&wval);
    ghost_densemat_valptr(x,(void **)&xval);

    __m256d betavec, alphavec;
   
    betavec = _mm256_broadcast_sd(beta);
    alphavec = _mm256_broadcast_sd(alpha);
    
    double dalpha = *(double *)alpha;
    double dbeta = *(double *)beta;
    
    // make sure that the initial x only gets added up once
    if (myrank) {
        dbeta = 0.;
        betavec = _mm256_setzero_pd();
    }

    ghost_lidx_t i,m;

    if (x->traits.storage == GHOST_DENSEMAT_COLMAJOR) {
        ghost_lidx_t k;
        for (k=0; k<CFGK; k++) {
            for (m=0; m+4<=CFGM; m+=4) {
                _mm256_store_pd(&xval[k*ldx+m],_mm256_mul_pd(_mm256_load_pd(&xval[k*ldx+m]),betavec));
            }
            for (; m<CFGM; m++) {
                xval[k*ldx+m] = dbeta*xval[k*ldx+m];
            }
        }
#pragma omp parallel private(m,k)
        {
            m=0;
            #GHOST_UNROLL#__m256d vvec@;#4
            #GHOST_UNROLL#__m256d wvec@;#4

            double *x_priv;
            ghost_lidx_t ldxpriv = PAD(CFGM,4);
            if (ldxpriv != CFGM) {
                INFO_LOG("Pad xpriv from %d to %d",CFGM,ldxpriv);
            }
            ghost_malloc_align((void **)&x_priv,ldxpriv*CFGK*sizeof(double),32);
            memset(x_priv,0,ldxpriv*CFGK*sizeof(double));

#pragma omp for schedule(runtime)
            for (i=0; i<n; i++) {
                for (k=0; k+4<=CFGK; k+=4) {
                    #GHOST_UNROLL#wvec@ = _mm256_mul_pd(_mm256_set1_pd(wval[i*ldw+(k+@)]),alphavec);#4
                   
                    for (m=0; m+4<=CFGM; m+=4) {
                        #GHOST_UNROLL#vvec@ = _mm256_mul_pd(_mm256_load_pd(&vval[i*ldv+m]),wvec@);#4
                        #GHOST_UNROLL#_mm256_store_pd(&x_priv[(k+@)*ldxpriv+m],_mm256_add_pd(_mm256_load_pd(&x_priv[(k+@)*ldxpriv+m]),vvec@));#4

                    }
                    for (; m<CFGM; m++) {
                        x_priv[(k+0)*ldxpriv+m] += dalpha*vval[i*ldv+m]*wval[i*ldw+(k+0)];
                        x_priv[(k+1)*ldxpriv+m] += dalpha*vval[i*ldv+m]*wval[i*ldw+(k+1)];
                        x_priv[(k+2)*ldxpriv+m] += dalpha*vval[i*ldv+m]*wval[i*ldw+(k+2)];
                        x_priv[(k+3)*ldxpriv+m] += dalpha*vval[i*ldv+m]*wval[i*ldw+(k+3)];
                    }
                }
                for (; k<CFGK; k++) {
                    wvec0 = _mm256_mul_pd(_mm256_set1_pd(wval[i*ldw+(k+0)]),alphavec);
                    for (m=0; m+4<=CFGM; m+=4) {
                        vvec0 = _mm256_mul_pd(_mm256_load_pd(&vval[i*ldv+m]),wvec0);
                        _mm256_store_pd(&x_priv[(k+0)*ldxpriv+m],_mm256_add_pd(_mm256_load_pd(&x_priv[(k+0)*ldxpriv+m]),vvec0));
                    }
                    for (; m<CFGM; m++) {
                        x_priv[k*ldxpriv+m] += dalpha*vval[i*ldv+m]*wval[i*ldw+k];
                    }
                }
            }
            
#pragma omp critical
            {
                m=0;
                for (k=0; k+4<=CFGK; k+=4) {
                    for (m=0; m+4<=CFGM; m+=4) {
                        #GHOST_UNROLL#_mm256_store_pd(&xval[(k+@)*ldx+m],_mm256_add_pd(_mm256_load_pd(&xval[(k+@)*ldx+m]),_mm256_load_pd(&x_priv[(k+@)*ldxpriv+m])));#4
                    }
                    for (; m<CFGM; m++) {
                        xval[(k+0)*ldx+m] += x_priv[(k+0)*ldxpriv+m];
                        xval[(k+1)*ldx+m] += x_priv[(k+1)*ldxpriv+m];
                        xval[(k+2)*ldx+m] += x_priv[(k+2)*ldxpriv+m];
                        xval[(k+3)*ldx+m] += x_priv[(k+3)*ldxpriv+m];
                    }
                }
                for (; k<CFGK; k++) {
                    for (m=0; m+4<=CFGM; m+=4) {
                        _mm256_store_pd(&xval[(k+0)*ldx+m],_mm256_add_pd(_mm256_load_pd(&xval[(k+0)*ldx+m]),_mm256_load_pd(&x_priv[(k+0)*ldxpriv+m])));
                    }
                    for (; m<CFGM; m++) {
                        xval[k*ldx+m] += x_priv[k*ldxpriv+m];
                    }
                }
            }
            free(x_priv);
    }
            
    } else {
        ERROR_LOG("Will be implemented soon :-)!");
        ret = GHOST_ERR_NOT_IMPLEMENTED;
        goto err;
    }
   
    goto out;
err:

out:
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
#else
    UNUSED(x);
    UNUSED(v);
    UNUSED(w);
    UNUSED(alpha);
    UNUSED(beta);
    ERROR_LOG("No AVX available!");
    return GHOST_ERR_UNKNOWN;
#endif
}
#GHOST_FUNC_END
