/*!GHOST_AUTOGEN BLOCKDIM1;BLOCKDIM2 */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/util.h"
#include "ghost/densemat.h"
#include "ghost/tsmm_cu_gen.h"
#include "ghost/tsmm_cu_kernel.h"
#include "ghost/cu_complex.h"
#include "ghost/math.h"

#GHOST_SUBST CFGK ${BLOCKDIM1}
#GHOST_SUBST CFGM ${BLOCKDIM2}

#define THREADSPERBLOCK 256

ghost_error ghost_tsmm__u_cuda_x_CFGK_CFGM_1_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta) 
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL); 
    ghost_error ret = GHOST_SUCCESS;
    dim3 block, grid;
    block.x = x->traits.ncols;
    block.y = CEILDIV(THREADSPERBLOCK,block.x);
    block.z = 1;
    grid.x = CEILDIV(x->traits.nrows,block.y);
    grid.y = 1;
    grid.z = 1;

    if (ghost_iszero(beta,x->traits.datatype)) {
        if (x->traits.datatype & GHOST_DT_COMPLEX) {
            if (x->traits.datatype & GHOST_DT_DOUBLE) {
                ghost_tsmm_cu_rm_cm<cuDoubleComplex,CFGM,CFGK,true><<< grid,block >>>(
                        (cuDoubleComplex *)x->cu_val,(const cuDoubleComplex *)v->cu_val,(const cuDoubleComplex *)w->cu_val,*(cuDoubleComplex *)alpha,*(cuDoubleComplex *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            } else {
                ghost_tsmm_cu_rm_cm<cuFloatComplex,CFGM,CFGK,true><<< grid,block >>>(
                        (cuFloatComplex *)x->cu_val,(const cuFloatComplex *)v->cu_val,(const cuFloatComplex *)w->cu_val,*(cuFloatComplex *)alpha,*(cuFloatComplex *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            }
        } else {
            if (x->traits.datatype & GHOST_DT_DOUBLE) {
                ghost_tsmm_cu_rm_cm<double,CFGM,CFGK,true><<< grid,block >>>(
                       (double *)x->cu_val,(const double *)v->cu_val,(const double *)w->cu_val,*(double *)alpha,*(double *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            } else {
                ghost_tsmm_cu_rm_cm<float,CFGM,CFGK,true><<< grid,block >>>(
                       (float *)x->cu_val,(const float *)v->cu_val,(const float *)w->cu_val,*(float *)alpha,*(float *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            }
        }
    } else {
        if (x->traits.datatype & GHOST_DT_COMPLEX) {
            if (x->traits.datatype & GHOST_DT_DOUBLE) {
                ghost_tsmm_cu_rm_cm<cuDoubleComplex,CFGM,CFGK,false><<< grid,block >>>(
                        (cuDoubleComplex *)x->cu_val,(const cuDoubleComplex *)v->cu_val,(const cuDoubleComplex *)w->cu_val,*(cuDoubleComplex *)alpha,*(cuDoubleComplex *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            } else {
                ghost_tsmm_cu_rm_cm<cuFloatComplex,CFGM,CFGK,false><<< grid,block >>>(
                        (cuFloatComplex *)x->cu_val,(const cuFloatComplex *)v->cu_val,(const cuFloatComplex *)w->cu_val,*(cuFloatComplex *)alpha,*(cuFloatComplex *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            }
        } else {
            if (x->traits.datatype & GHOST_DT_DOUBLE) {
                ghost_tsmm_cu_rm_cm<double,CFGM,CFGK,false><<< grid,block >>>(
                       (double *)x->cu_val,(const double *)v->cu_val,(const double *)w->cu_val,*(double *)alpha,*(double *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            } else {
                ghost_tsmm_cu_rm_cm<float,CFGM,CFGK,false><<< grid,block >>>(
                       (float *)x->cu_val,(const float *)v->cu_val,(const float *)w->cu_val,*(float *)alpha,*(float *)beta,x->traits.nrows,x->stride,v->stride,w->stride);
            }
        }
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL); 
    CUDA_CALL_RETURN(cudaGetLastError());
    return ret;
}

