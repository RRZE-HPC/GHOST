/*!GHOST_AUTOGEN_TSMM-INPLACE *,* */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/math.h"
#include "ghost/instr.h"
#include "ghost/util.h"
#include "ghost/tsmm_inplace_var2_plain_gen.h"

ghost_error ghost_tsmm_inplace__a_plain_d_x_x(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;

    ghost_lidx m = x->traits.ncols;
    ghost_lidx n = x->traits.nrows;
    ghost_lidx ncolsout = w->traits.ncols;
    ghost_lidx ncolsin = w->traits.nrows;

    double dalpha = *(double *)alpha;
    double dbeta = *(double *)beta;
    
    INFO_LOG("In in-place TSMM with arbitrary block size (%"PRLIDX"x%"PRLIDX") <- %f * (%"PRLIDX"x%"PRLIDX") * (%"PRLIDX"x%"PRLIDX")",n,ncolsout,dalpha,n,m,ncolsin,ncolsout);

    const double * const restrict wval = (const double *) w->val;
    double * const restrict xval = (double *) x->val;

    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    ghost_lidx i,j,s;

    /* construct dense wval... we can safely copy it as it is small! */
    double * restrict wtmp = NULL;
    ghost_lidx ncolsin_padded = PAD(ncolsin,4);
    ghost_malloc_align((void**)&wtmp,ncolsin_padded*ncolsout*sizeof(double),32);
    memset(wtmp,0,ncolsin_padded*ncolsout*sizeof(double));
    for(s=0; s<ncolsout; s++)
    {
      for(j=0; j<ncolsin; j++)
      {
        wtmp[s*ncolsin_padded+j] = dalpha*wval[s*ldw+j];
        if(s==j)
          wtmp[s*ncolsin_padded+j] += dbeta;
      }
    }

#pragma omp parallel private(j,s)
    {
        double * restrict tmp = NULL;
        ghost_malloc_align((void**)&tmp,ncolsout*sizeof(double),32);
#pragma omp for schedule(runtime)
        for (i=0; i<n; i++) {
            for (s=0; s<ncolsout; s++) {
                tmp[s] = 0.;
#pragma vector aligned
#pragma vector always
#pragma ivdep
#pragma simd
                for (j=0; j<ncolsin; j++) {
                    tmp[s] += xval[i*ldx+j]*wtmp[s*ncolsin_padded+j];
                }
            }
            memcpy(&xval[i*ldx],tmp,ncolsout*sizeof(double));
        }
        free(tmp);
    }

    free(wtmp);
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}

ghost_error ghost_tsmm_inplace__a_plain_z_x_x(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;

    ghost_lidx m = x->traits.ncols;
    ghost_lidx n = x->traits.nrows;
    ghost_lidx ncolsout = w->traits.ncols;
    ghost_lidx ncolsin = w->traits.nrows;

    double complex dalpha = *(double complex *)alpha;
    double complex dbeta = *(double complex *)beta;
    
    INFO_LOG("In in-place TSMM with arbitrary block size (%"PRLIDX"x%"PRLIDX") <- %f+I*%f * (%"PRLIDX"x%"PRLIDX") * (%"PRLIDX"x%"PRLIDX")",n,m,creal(dalpha),cimag(dalpha),n,m,m,m);

    const double complex * const restrict wval = (const double complex*) w->val;
    double complex * const restrict xval = (double complex*) x->val;

    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    ghost_lidx i,j,s;

#pragma omp parallel private(j,s)
    {
#pragma omp for schedule(runtime)
        for (i=0; i<n; i++) {
            double complex tmp[ncolsout];
            for (s=0; s<ncolsout; s++) {
                tmp[s] = dbeta*xval[i*ldx+s];
#pragma vector aligned
#pragma vector always
#pragma ivdep
#pragma simd
                for (j=0; j<ncolsin; j++) {
                    tmp[s] += dalpha*xval[i*ldx+j]*wval[s*ldw+j];
                }
            }
            memcpy(&xval[i*ldx],tmp,ncolsout*sizeof(double complex));
        }
    }
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}

ghost_error ghost_tsmm_inplace__a_plain_s_x_x(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;

    ghost_lidx m = x->traits.ncols;
    ghost_lidx n = x->traits.nrows;
    ghost_lidx ncolsout = w->traits.ncols;
    ghost_lidx ncolsin = w->traits.nrows;

    float dalpha = *(float *)alpha;
    float dbeta = *(float *)beta;
    
    INFO_LOG("In in-place TSMM with arbitrary block size (%"PRLIDX"x%"PRLIDX") <- %f * (%"PRLIDX"x%"PRLIDX") * (%"PRLIDX"x%"PRLIDX")",n,ncolsout,dalpha,n,m,ncolsin,ncolsout);

    const float * const restrict wval = (const float *) w->val;
    float * const restrict xval = (float *) x->val;

    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    ghost_lidx i,j,s;

    /* construct dense wval... we can safely copy it as it is small! */
    float * restrict wtmp = NULL;
    ghost_lidx ncolsin_padded = PAD(ncolsin,4);
    ghost_malloc_align((void**)&wtmp,ncolsin_padded*ncolsout*sizeof(float),32);
    memset(wtmp,0,ncolsin_padded*ncolsout*sizeof(float));
    for(s=0; s<ncolsout; s++)
    {
      for(j=0; j<ncolsin; j++)
      {
        wtmp[s*ncolsin_padded+j] = dalpha*wval[s*ldw+j];
        if(s==j)
          wtmp[s*ncolsin_padded+j] += dbeta;
      }
    }

#pragma omp parallel private(j,s)
    {
        float * restrict tmp = NULL;
        ghost_malloc_align((void**)&tmp,ncolsout*sizeof(float),32);
#pragma omp for schedule(runtime)
        for (i=0; i<n; i++) {
            for (s=0; s<ncolsout; s++) {
                tmp[s] = 0.;
#pragma vector aligned
#pragma vector always
#pragma ivdep
#pragma simd
                for (j=0; j<ncolsin; j++) {
                    tmp[s] += xval[i*ldx+j]*wtmp[s*ncolsin_padded+j];
                }
            }
            memcpy(&xval[i*ldx],tmp,ncolsout*sizeof(float));
        }
        free(tmp);
    }

    free(wtmp);
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}


ghost_error ghost_tsmm_inplace__a_plain_c_x_x(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;

    ghost_lidx m = x->traits.ncols;
    ghost_lidx n = x->traits.nrows;
    ghost_lidx ncolsout = w->traits.ncols;
    ghost_lidx ncolsin = w->traits.nrows;

    float complex dalpha = *(float complex *)alpha;
    float complex dbeta = *(float complex *)beta;
    
    INFO_LOG("In in-place TSMM with arbitrary block size (%"PRLIDX"x%"PRLIDX") <- %f+I*%f * (%"PRLIDX"x%"PRLIDX") * (%"PRLIDX"x%"PRLIDX")",n,m,creal(dalpha),cimag(dalpha),n,m,m,m);

    const float complex * const restrict wval = (const float complex *) w->val;
    float complex * const restrict xval = (float complex *) x->val;

    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    ghost_lidx i,j,s;

#pragma omp parallel private(j,s)
    {
#pragma omp for schedule(runtime)
        for (i=0; i<n; i++) {
            float complex tmp[ncolsout];
            for (s=0; s<ncolsout; s++) {
                tmp[s] = dbeta*xval[i*ldx+s];
#pragma vector aligned
#pragma vector always
#pragma ivdep
#pragma simd
                for (j=0; j<ncolsin; j++) {
                    tmp[s] += dalpha*xval[i*ldx+j]*wval[s*ldw+j];
                }
            }
            memcpy(&xval[i*ldx],tmp,ncolsout*sizeof(float complex));
        }
    }
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}
