/*!GHOST_AUTOGEN_TSMTTSM *,* */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/math.h"
#include "ghost/instr.h"
#include "ghost/util.h"
#include "ghost/tsmttsm_var2_plain_gen.h"


namespace {
template<bool ROWMAJOR, bool ALIGN>
ghost_error tsmttsm__a_plain_d_x_x_1_xx(
    ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    UNUSED(conjv);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;
    ghost_lidx K = w->traits.ncols;

    ghost_lidx n = DM_NROWS(v);
    ghost_lidx m = v->traits.ncols;

    if (ROWMAJOR) {
        if (ALIGN) {
            GHOST_INFO_LOG(
                "In ALIGNED Row-Major TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d", m,
                K, m, n, n, K);
        } else {
            GHOST_INFO_LOG(
                "In UNALIGNED Row-Major TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",
                m, K, m, n, n, K);
        }
    } else {
        if (ALIGN) {
            GHOST_INFO_LOG(
                "In ALIGNED Col-Major TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d", m,
                K, m, n, n, K);
        } else {
            GHOST_INFO_LOG(
                "In UNALIGNED Col-Major TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",
                m, K, m, n, n, K);
        }
    }
    const double *const __restrict__ vval = (const double *)v->val;
    const double *const __restrict__ wval = (const double *)w->val;
    double *const __restrict__ xval = (double *)x->val;

    const ghost_lidx ldv = v->stride;
    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    double dalpha = *(double *)alpha;
    double dbeta = *(double *)beta;

    ghost_lidx i, j;

    ghost_lidx k;
    for (j = 0; j < m; j++) {
        for (k = 0; k < K; k++) {
            xval[k * ldx + j] = dbeta * xval[k * ldx + j];
        }
    }
#pragma omp parallel private(j, k)
    {
        double *x_priv;
        ghost_malloc_align((void **)&x_priv, m * K * sizeof(double), 32);
        memset(x_priv, 0, m * K * sizeof(double));
#pragma omp for schedule(static)
        for (i = 0; i < n; i++) {
            if (ALIGN) {
#pragma vector aligned
#pragma ivdep
#pragma simd
                for (k = 0; k < K; k++) {
                    for (j = 0; j < m; j++) {
                        if (ROWMAJOR)
                            x_priv[j * K + k] += vval[i * ldv + j] * wval[i * ldw + k];
                        else
                            x_priv[j * K + k] += vval[j * ldv + i] * wval[k * ldw + i];
                    }
                }
            } else {
#pragma vector unaligned
#pragma ivdep
#pragma simd
                for (k = 0; k < K; k++) {
                    for (j = 0; j < m; j++) {
                        if (ROWMAJOR)
                            x_priv[j * K + k] += vval[i * ldv + j] * wval[i * ldw + k];
                        else
                            x_priv[j * K + k] += vval[j * ldv + i] * wval[k * ldw + i];
                    }
                }
            }
        }

#pragma omp critical
        {
#pragma vector aligned
#pragma ivdep
#pragma simd
            for (k = 0; k < K; k++) {
#pragma unroll_and_jam
                for (j = 0; j < m; j++) {
                    xval[k * ldx + j] += dalpha * x_priv[j * K + k];
                }
            }
        }
        free(x_priv);
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}
}

ghost_error ghost_tsmttsm__a_plain_d_x_x_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    return tsmttsm__a_plain_d_x_x_1_xx<true, true>(x, v, w, alpha, beta, conjv);
}
ghost_error ghost_tsmttsm__a_plain_d_x_x_1_cm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    return tsmttsm__a_plain_d_x_x_1_xx<false, true>(x, v, w, alpha, beta, conjv);
}

ghost_error ghost_tsmttsm__u_plain_d_x_x_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    return tsmttsm__a_plain_d_x_x_1_xx<true, false>(x, v, w, alpha, beta, conjv);
}
ghost_error ghost_tsmttsm__u_plain_d_x_x_1_cm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    return tsmttsm__a_plain_d_x_x_1_xx<false, false>(x, v, w, alpha, beta, conjv);
}

/*ghost_error 
ghost_tsmttsm__a_plain
_z_x_x_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;
    ghost_lidx K = w->traits.ncols;

    ghost_lidx n = DM_NROWS(v);
    ghost_lidx m = v->traits.ncols;
    
    GHOST_INFO_LOG("In TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",m,K,m,n,n,K);
   
    const double complex * const __restrict__ vval = (const double complex*) v->val;
    const double complex * const __restrict__ wval = (const double complex*) w->val;
    double complex * const __restrict__ xval = (double complex*) x->val;

    const ghost_lidx ldv = v->stride;
    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;
    
    const double complex dalpha = *(double complex *)alpha;
    double complex dbeta = *(double complex *)beta;

    ghost_mpi_op mpiop_zadd;
    ghost_mpi_datatype mpidt_z;
    ghost_mpi_op_sum(&mpiop_zadd,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));
    ghost_mpi_datatype_get(&mpidt_z,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));
    
    ghost_lidx i,j;
    
    ghost_lidx k;
    for (j=0; j<m; j++) {
        for (k=0; k<K; k++) {
            xval[k*ldx+j] = dbeta*xval[k*ldx+j];
        }
    }
#pragma omp parallel private(j,k)
    {
        complex double *x_priv;
        ghost_malloc((void **)&x_priv,m*K*sizeof(complex double));
        memset(x_priv,0,m*K*sizeof(complex double));

        if (conjv) {
#pragma omp for schedule(runtime)
            for (i=0; i<n; i++) {
#pragma simd
                for (k=0; k<K; k++) {
                  for (j=0; j<m; j++) {
                        x_priv[j*K+k] += dalpha*conj(vval[i*ldv+j])*wval[i*ldw+k];
                    }
                }

            }
        } else {
#pragma omp for schedule(runtime)
            for (i=0; i<n; i++) {
#pragma simd
                for (k=0; k<K; k++) {
                  for (j=0; j<m; j++) {
                        x_priv[j*K+k] += dalpha*vval[i*ldv+j]*wval[i*ldw+k];
                    }
                }

            }
        }
#pragma omp critical
#pragma simd
        for (k=0; k<K; k++) {
            for (j=0; j<m; j++) {
                xval[k*ldx+j] += x_priv[j*K+k];
            }
        }
        free(x_priv);
    }
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}
*/ /*
ghost_error ghost_tsmttsm__u_plain 

_z_x_x_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int conjv)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;
    ghost_lidx K = w->traits.ncols;

    ghost_lidx n = DM_NROWS(v);
    ghost_lidx m = v->traits.ncols;
    
    GHOST_INFO_LOG("In TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",m,K,m,n,n,K);
    
    const double complex * const __restrict__ vval = (const double complex*) v->val;
    const double complex * const __restrict__ wval = (const double complex*) w->val;
    double complex * const __restrict__ xval = (double complex*) x->val;

    const ghost_lidx ldv = v->stride;
    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;
    
    const double complex dalpha = *(double complex *)alpha;
    double complex dbeta = *(double complex *)beta;

    ghost_mpi_op mpiop_zadd;
    ghost_mpi_datatype mpidt_z;
    ghost_mpi_op_sum(&mpiop_zadd,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));
    ghost_mpi_datatype_get(&mpidt_z,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));
    
    ghost_lidx i,j;
    
    ghost_lidx k;
    for (j=0; j<m; j++) {
        for (k=0; k<K; k++) {
            xval[k*ldx+j] = dbeta*xval[k*ldx+j];
        }
    }
#pragma omp parallel private(j,k)
    {
        complex double *x_priv;
        ghost_malloc((void **)&x_priv,m*K*sizeof(complex double));
        memset(x_priv,0,m*K*sizeof(complex double));

        if (conjv) {
#pragma omp for schedule(runtime)
            for (i=0; i<n; i++) {
                for (k=0; k<K; k++) {
                  for (j=0; j<m; j++) {
                        x_priv[j*K+k] += dalpha*conj(vval[i*ldv+j])*wval[i*ldw+k];
                    }
                }

            }
        } else {
#pragma omp for schedule(runtime)
            for (i=0; i<n; i++) {
                for (k=0; k<K; k++) {
                  for (j=0; j<m; j++) {
                        x_priv[j*K+k] += dalpha*vval[i*ldv+j]*wval[i*ldw+k];
                    }
                }

            }
        }
#pragma omp critical
        for (k=0; k<K; k++) {
            for (j=0; j<m; j++) {
                xval[k*ldx+j] += x_priv[j*K+k];
            }
        }
        free(x_priv);
    }
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}
*/ /*
 ghost_error ghost_tsmttsm__u_plain
 _c_x_x_1_rm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int
 conjv)
 {
     GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
     ghost_error ret = GHOST_SUCCESS;
     ghost_lidx K = w->traits.ncols;

     ghost_lidx n = DM_NROWS(v);
     ghost_lidx m = v->traits.ncols;

     GHOST_INFO_LOG("In TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",m,K,m,n,n,K);

     const float complex * const __restrict__ vval = (const float complex *) v->val;
     const float complex * const __restrict__ wval = (const float complex *) w->val;
     float complex * const __restrict__ xval = (float complex *) x->val;

     const ghost_lidx ldv = v->stride;
     const ghost_lidx ldw = w->stride;
     const ghost_lidx ldx = x->stride;

     const float complex dalpha = *(float complex *)alpha;
     float complex dbeta = *(float complex *)beta;

     ghost_mpi_op mpiop_zadd;
     ghost_mpi_datatype mpidt_z;
     ghost_mpi_op_sum(&mpiop_zadd,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_FLOAT));
     ghost_mpi_datatype_get(&mpidt_z,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_FLOAT));

     ghost_lidx i,j;

     ghost_lidx k;
     for (j=0; j<m; j++) {
         for (k=0; k<K; k++) {
             xval[k*ldx+j] = dbeta*xval[k*ldx+j];
         }
     }
 #pragma omp parallel private(j,k)
     {
         complex float *x_priv;
         ghost_malloc((void **)&x_priv,m*K*sizeof(complex float));
         memset(x_priv,0,m*K*sizeof(complex float));

         if (conjv) {
 #pragma omp for schedule(runtime)
             for (i=0; i<n; i++) {
 #pragma simd
 #pragma vector unaligned
                 for (k=0; k<K; k++) {
                   for (j=0; j<m; j++) {
                         x_priv[j*K+k] += dalpha*conjf(vval[i*ldv+j])*wval[i*ldw+k];
                     }
                 }

             }
         } else {
 #pragma omp for schedule(runtime)
             for (i=0; i<n; i++) {
 #pragma simd
 #pragma vector unaligned
                 for (k=0; k<K; k++) {
                   for (j=0; j<m; j++) {
                         x_priv[j*K+k] += dalpha*vval[i*ldv+j]*wval[i*ldw+k];
                     }
                 }

             }
         }
 #pragma omp critical
 #pragma simd
 #pragma vector unaligned
         for (k=0; k<K; k++) {
             for (j=0; j<m; j++) {
                 xval[k*ldx+j] += x_priv[j*K+k];
             }
         }
         free(x_priv);
     }

     GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
     return ret;
 }

 ghost_error ghost_tsmttsm__a_plain
 _z_x_x_1_cm(ghost_densemat *x, ghost_densemat *v, ghost_densemat *w, void *alpha, void *beta, int
 conjv)
 {
     GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
     ghost_error ret = GHOST_SUCCESS;
     ghost_lidx K = w->traits.ncols;

     ghost_lidx n = DM_NROWS(v);
     ghost_lidx m = v->traits.ncols;

     GHOST_INFO_LOG("In TSMTTSM with arbitrary block sizes %dx%d <- %dx%d * %dx%d",m,K,m,n,n,K);

     const double complex * const __restrict__ vval = (const double complex*) v->val;
     const double complex * const __restrict__ wval = (const double complex*) w->val;
     double complex * const __restrict__ xval = (double complex*) x->val;

     const ghost_lidx ldv = v->stride;
     const ghost_lidx ldw = w->stride;
     const ghost_lidx ldx = x->stride;

     double complex dalpha = *(double complex *)alpha;
     double complex dbeta = *(double complex *)beta;

     ghost_mpi_op mpiop_zadd;
     ghost_mpi_datatype mpidt_z;
     ghost_mpi_op_sum(&mpiop_zadd,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));
     ghost_mpi_datatype_get(&mpidt_z,(ghost_datatype)(GHOST_DT_COMPLEX|GHOST_DT_DOUBLE));

     ghost_lidx i,j;

     ghost_lidx k;
     for (j=0; j<m; j++) {
         for (k=0; k<K; k++) {
             xval[k*ldx+j] = dbeta*xval[k*ldx+j];
         }
     }
 #pragma omp parallel private(j,k)
     {
         complex double *x_priv;
         ghost_malloc((void **)&x_priv,m*K*sizeof(complex double));
         memset(x_priv,0,m*K*sizeof(complex double));

         if (conjv) {
 #pragma omp for schedule(runtime)
             for (i=0; i<n; i++) {
 #pragma simd
                 for (k=0; k<K; k++) {
                   for (j=0; j<m; j++) {
                         x_priv[j*K+k] += dalpha*conj(vval[j*ldv+i])*wval[k*ldw+i];
                     }
                 }

             }
         } else {
 #pragma omp for schedule(runtime)
             for (i=0; i<n; i++) {
 #pragma simd
                 for (k=0; k<K; k++) {
                   for (j=0; j<m; j++) {
                         x_priv[j*K+k] += dalpha*vval[j*ldv+i]*wval[k*ldw+i];
                     }
                 }

             }
         }
 #pragma omp critical
 #pragma simd
         for (k=0; k<K; k++) {
             for (j=0; j<m; j++) {
                 xval[k*ldx+j] += x_priv[j*K+k];
             }
         }
         free(x_priv);
     }

     GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
     return ret;
 }

 */
