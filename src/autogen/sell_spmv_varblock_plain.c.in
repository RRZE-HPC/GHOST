/*!GHOST_AUTOGEN_SPMMV CHUNKHEIGHT,* */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/util.h"
#include "ghost/instr.h"
#include "ghost/omp.h"
#include "ghost/machine.h"
#include "ghost/math.h"
#include "ghost/sparsemat.h"
#include "ghost/sell_spmv_varblock_plain_gen.h"

#GHOST_SUBST CHUNKHEIGHT ${CHUNKHEIGHT}

ghost_error ghost_sellspmv__a_plain_z_z_rm_CHUNKHEIGHT_x(ghost_densemat *res, ghost_sparsemat *mat, ghost_densemat* invec, ghost_spmv_opts traits)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    complex double *mval = (complex double *)mat->val;
    complex double *local_dot_product = NULL;
    complex double *partsums = NULL;
    int nthreads = 1, i;
    ghost_lidx v;
   
    complex double *shift = NULL, scale = 1., beta = 1.; 
    complex double delta = 0., eta = 0.;
    ghost_densemat *z = NULL;
    unsigned clsize;
    ghost_machine_cacheline_size(&clsize);
    int pad = (int) clsize/sizeof(complex double);

    GHOST_SPMV_PARSE_TRAITS(traits,scale,beta,shift,local_dot_product,z,delta,eta,complex double,
            complex double);

    if (traits.flags & GHOST_SPMV_DOT) {
#pragma omp parallel
        nthreads = ghost_omp_nthread();

        GHOST_CALL_RETURN(ghost_malloc((void **)&partsums,
                    (3*res->traits.ncols+pad)*nthreads*sizeof(complex double))); 
        for (i=0; i<(3*res->traits.ncols+pad)*nthreads; i++) {
            partsums[i] = 0.;
        }
    }
   
#pragma omp parallel shared (partsums) private(v)
    {
        ghost_lidx j,r;
        ghost_lidx offs;
        complex double tmp;
        complex double *rhsval = (complex double *)invec->val;
        complex double *zval = NULL;
        if (z) {
            zval = (complex double *)z->val;
        }
        int tid = ghost_omp_threadnum();

#pragma omp for schedule(runtime)
        for (r=0; r<SPM_NROWS(mat); r++) 
        { // loop over rows
            offs = mat->chunkStart[r/CHUNKHEIGHT]+r%CHUNKHEIGHT;
            complex double *lrow = ((complex double *)(res->val))+res->stride*r;
            complex double *rrow;
            if (mat->context->col_map->loc_perm == mat->context->row_map->loc_perm) {
                rrow = rhsval+invec->stride*r;
            } else {
                rrow = rhsval+invec->stride*mat->context->col_map->loc_perm[mat->context->row_map->loc_perm_inv[r]];
            }
            complex double *zrow = NULL;
            complex double matval;
            ghost_lidx matcol;
            if (z) {
                zrow = zval+z->stride*r;
            }
                
            if ((traits.flags&GHOST_SPMV_AUG_FLAGS) == (GHOST_SPMV_SCALE|GHOST_SPMV_AXPBY)) {
                // make common case fast
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }
                    lrow[v] = beta*lrow[v] + scale*tmp;
                }
            } else if ((traits.flags&GHOST_SPMV_AUG_FLAGS) == (GHOST_SPMV_SCALE|GHOST_SPMV_AXPBY|GHOST_SPMV_SHIFT|GHOST_SPMV_CHAIN_AXPBY)) {
               // make ChebFD case fast
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }
                    lrow[v] = beta*lrow[v] + scale*(tmp-shift[0]*rrow[v]);
                    zrow[v] = delta*zrow[v] + eta*lrow[v];
                }
            } else { // fallback
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }

                    if ((traits.flags & GHOST_SPMV_SHIFT) && shift) {
                            tmp = tmp-shift[0]*rrow[v];
                    }
                    if ((traits.flags & GHOST_SPMV_VSHIFT) && shift) {
                            tmp = tmp-shift[v]*rrow[v];
                    }
                    if (traits.flags & GHOST_SPMV_SCALE) {
                            tmp = tmp*scale;
                    }
                    if (traits.flags & GHOST_SPMV_AXPY) {
                            lrow[v] += tmp;
                    } else if (traits.flags & GHOST_SPMV_AXPBY) {
                            lrow[v] = beta*lrow[v] + tmp;
                    } else {
                        if (traits.flags & GHOST_SPMV_CHAIN_AXPBY) {
                                lrow[v] = tmp;
                        } else {
                            // TODO streaming store in this case
                                lrow[v] = tmp;
                        }
                    }
                    if (traits.flags & GHOST_SPMV_CHAIN_AXPBY) {
                            zrow[v] = delta*zrow[v] + eta*lrow[v];
                    }
                        
                    if (traits.flags & GHOST_SPMV_DOT) {
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+0] += 
                                conj(lrow[v])*lrow[v];
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+1] += 
                                conj(rrow[v])*lrow[v];
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+2] += 
                                conj(rrow[v])*rrow[v];
                    }
                }
            }
        }
    }
    if (traits.flags & GHOST_SPMV_DOT) {
        if (!local_dot_product) {
            GHOST_ERROR_LOG("The location of the local dot products is NULL!");
            return GHOST_ERR_INVALID_ARG;
        }
        for (v=0; v<res->traits.ncols; v++) {
            local_dot_product[v                       ] = 0.; 
            local_dot_product[v  +   res->traits.ncols] = 0.;
            local_dot_product[v  + 2*res->traits.ncols] = 0.;
            for (i=0; i<nthreads; i++) {
                local_dot_product[v                      ] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 0];
                local_dot_product[v +   res->traits.ncols] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 1];
                local_dot_product[v + 2*res->traits.ncols] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 2];
            }
        }
        free(partsums);
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

ghost_error ghost_sellspmv__a_plain_d_d_rm_CHUNKHEIGHT_x(ghost_densemat *res, ghost_sparsemat *mat, ghost_densemat* invec, ghost_spmv_opts traits)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    double *mval = (double *)mat->val;
    double *local_dot_product = NULL;
    double *partsums = NULL;
    int nthreads = 1, i;
    ghost_lidx v;
   
    double *shift = NULL, scale = 1., beta = 1.; 
    double delta = 0., eta = 0.;
    ghost_densemat *z = NULL;
    unsigned clsize;
    ghost_machine_cacheline_size(&clsize);
    int pad = (int) clsize/sizeof(double);

    GHOST_SPMV_PARSE_TRAITS(traits,scale,beta,shift,local_dot_product,z,delta,eta,double,
            double);

    if (traits.flags & GHOST_SPMV_DOT) {
#pragma omp parallel
        nthreads = ghost_omp_nthread();

        GHOST_CALL_RETURN(ghost_malloc((void **)&partsums,
                    (3*res->traits.ncols+pad)*nthreads*sizeof(double))); 
        for (i=0; i<(3*res->traits.ncols+pad)*nthreads; i++) {
            partsums[i] = 0.;
        }
    }
   
#pragma omp parallel shared (partsums) private(v)
    {
        ghost_lidx j,r;
        ghost_lidx offs;
        double tmp;
        double *rhsval = (double *)invec->val;
        double *zval = NULL;
        if (z) {
            zval = (double *)z->val;
        }
        int tid = ghost_omp_threadnum();

#pragma omp for schedule(runtime)
        for (r=0; r<SPM_NROWS(mat); r++) 
        { // loop over rows
            offs = mat->chunkStart[r/CHUNKHEIGHT]+r%CHUNKHEIGHT;
            double *lrow = ((double *)(res->val))+res->stride*r;
            double *rrow;
            if (mat->context->col_map->loc_perm == mat->context->row_map->loc_perm) {
                rrow = rhsval+invec->stride*r;
            } else {
                rrow = rhsval+invec->stride*mat->context->col_map->loc_perm[mat->context->row_map->loc_perm_inv[r]];
            }
            double *zrow = NULL;
            double matval;
            ghost_lidx matcol;
            if (z) {
                zrow = zval+z->stride*r;
            }
                
            if ((traits.flags&GHOST_SPMV_AUG_FLAGS) == (GHOST_SPMV_SCALE|GHOST_SPMV_AXPBY)) {
                // make common case fast
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }
                    lrow[v] = beta*lrow[v] + scale*tmp;
                }
            } else if ((traits.flags&GHOST_SPMV_AUG_FLAGS) == (GHOST_SPMV_SCALE|GHOST_SPMV_AXPBY|GHOST_SPMV_SHIFT|GHOST_SPMV_CHAIN_AXPBY)) {
               // make ChebFD case fast
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }
                    lrow[v] = beta*lrow[v] + scale*(tmp-shift[0]*rrow[v]);
                    zrow[v] = delta*zrow[v] + eta*lrow[v];
                }
            } else { // fallback
#pragma simd
#pragma vector always aligned
                for (v=0; v<res->traits.ncols; v++) {
                    tmp = 0;
                    for (j=0; j<mat->rowLen[r]; j++) {
                        matval = mval[offs+j*CHUNKHEIGHT];
                        matcol = mat->col[offs+j*CHUNKHEIGHT];
                        tmp += matval*rhsval[invec->stride*matcol+v];
                    }

                    if ((traits.flags & GHOST_SPMV_SHIFT) && shift) {
                            tmp = tmp-shift[0]*rrow[v];
                    }
                    if ((traits.flags & GHOST_SPMV_VSHIFT) && shift) {
                            tmp = tmp-shift[v]*rrow[v];
                    }
                    if (traits.flags & GHOST_SPMV_SCALE) {
                            tmp = tmp*scale;
                    }
                    if (traits.flags & GHOST_SPMV_AXPY) {
                            lrow[v] += tmp;
                    } else if (traits.flags & GHOST_SPMV_AXPBY) {
                            lrow[v] = beta*lrow[v] + tmp;
                    } else {
                        if (traits.flags & GHOST_SPMV_CHAIN_AXPBY) {
                                lrow[v] = tmp;
                        } else {
                            // TODO streaming store in this case
                                lrow[v] = tmp;
                        }
                    }
                    if (traits.flags & GHOST_SPMV_CHAIN_AXPBY) {
                            zrow[v] = delta*zrow[v] + eta*lrow[v];
                    }
                        
                    if (traits.flags & GHOST_SPMV_DOT) {
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+0] += 
                                lrow[v]*lrow[v];
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+1] += 
                                rrow[v]*lrow[v];
                            partsums[((pad+3*res->traits.ncols)*tid)+3*v+2] += 
                                rrow[v]*rrow[v];
                    }
                }
            }
        }
    }
    if (traits.flags & GHOST_SPMV_DOT) {
        if (!local_dot_product) {
            GHOST_ERROR_LOG("The location of the local dot products is NULL!");
            return GHOST_ERR_INVALID_ARG;
        }
        for (v=0; v<res->traits.ncols; v++) {
            local_dot_product[v                       ] = 0.; 
            local_dot_product[v  +   res->traits.ncols] = 0.;
            local_dot_product[v  + 2*res->traits.ncols] = 0.;
            for (i=0; i<nthreads; i++) {
                local_dot_product[v                      ] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 0];
                local_dot_product[v +   res->traits.ncols] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 1];
                local_dot_product[v + 2*res->traits.ncols] += 
                    partsums[(pad+3*res->traits.ncols)*i + 3*v + 2];
            }
        }
        free(partsums);
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

