/*!GHOST_AUTOGEN_SPMMV_CUDA CHUNKHEIGHT,NVECS,AXPBY,SCALE,SHIFT,DOTYY,DOTXY,DOTXX,CHAINAXPBY */
#include "ghost/config.h"
#include "ghost/sparsemat.h"
#include "ghost/densemat.h"
#include "ghost/sell_spmv_cu_kernel.h"
#include "ghost/sell_spmv_cuda_gen.h"
#include <complex>
#include <cuComplex.h>

#GHOST_SUBST CHUNKHEIGHT ${CHUNKHEIGHT}
#GHOST_SUBST NVECS ${NVECS}
#GHOST_SUBST AXPBY ${AXPBY}
#GHOST_SUBST SCALE ${SCALE}
#GHOST_SUBST SHIFT ${SHIFT}
#GHOST_SUBST DOTYY ${DOTYY}
#GHOST_SUBST DOTXY ${DOTXY}
#GHOST_SUBST DOTXX ${DOTXX}
#GHOST_SUBST CHAIN ${CHAINAXPBY}

template<typename m_dt, typename v_dt_host, typename v_dt_device, typename v_dt_base>
static ghost_error ghost_sellspmv_cu_dt_CHUNKHEIGHT_NVECS_AXPBY_SCALE_SHIFT_DOTYY_DOTXY_DOTXX_CHAIN(ghost_densemat *lhs, ghost_sparsemat *mat, ghost_densemat *rhs, ghost_spmv_opts opts)
{
    return ghost_sellspmv_cu_tmpl<m_dt,v_dt_host,v_dt_device,v_dt_base,CHUNKHEIGHT,NVECS,AXPBY,SCALE,SHIFT,DOTYY,DOTXY,DOTXX,CHAIN>(lhs,mat,rhs,opts); 

}

ghost_error ghost_cusellspmv__u_cuda_x_x_x_CHUNKHEIGHT_NVECS_AXPBY_SCALE_SHIFT_DOTYY_DOTXY_DOTXX_CHAIN(ghost_densemat *lhs, ghost_sparsemat *mat, ghost_densemat *rhs, ghost_spmv_opts opts)
{
    ghost_error ret;
    SELECT_TMPL_4DATATYPES(mat->traits.datatype,rhs->traits.datatype,std::complex,ret,ghost_sellspmv_cu_dt_CHUNKHEIGHT_NVECS_AXPBY_SCALE_SHIFT_DOTYY_DOTXY_DOTXX_CHAIN,lhs,mat,rhs,opts);
    return ret;
}

