/*!GHOST_AUTOGEN_TSMM-INPLACE *,* */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/math.h"
#include "ghost/instr.h"
#include "ghost/util.h"
#include "ghost/tsmm_inplace_var2_plain_gen.h"
#include <complex>
#include <typeinfo>
#include <vector>

namespace {
template<typename T, typename iT>
ghost_error tsmm_inplace(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{

    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH)
    ghost_error ret = GHOST_SUCCESS;

    ghost_lidx N = w->traits.ncols;
    ghost_lidx M = DM_NROWS(w);
    ghost_lidx K = DM_NROWS(x);

    GHOST_INFO_LOG("In inplace TSMM with arbitrary block sizes %dx%d <- %dx%d * %dx%d, %s %s",
         M, K, M, N, N, K, typeid(T).name(), typeid(iT).name());
    

    const iT *const __restrict__ wval = (iT *)w->val;
    T *const __restrict__ xval = (T *)x->val;

    const ghost_lidx ldw = w->stride;
    const ghost_lidx ldx = x->stride;

    iT dalpha = *(iT *)alpha;
    iT dbeta = *(iT *)beta;


    if ( M == 1 && N == 1) {
#pragma omp parallel for
      #pragma simd
      for (ghost_gidx k = 0; k < K; k++) {
        xval[k*ldx] = (T) ( xval[k*ldx] * dbeta +  wval[0] * xval[k*ldx] * dalpha);
      }
      GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
        return ret;
    }




    ghost_lidx N_padded = PAD(N, 64 / sizeof(T));
    iT* tempw = NULL;
    ghost_malloc_align((void**)&tempw, N_padded*M*sizeof(iT), 64);
    for( int m = 0; m < M; m++) {
      for( int n = 0; n < N; n++) {
        tempw[m*N_padded + n] = wval[n*ldw + m];
      }
    }

    if ( N < 4) {
#pragma omp parallel
      {
        T* tempx = (T*) malloc(M*sizeof(T));
#pragma omp for schedule(static)
        for (ghost_gidx k = 0; k < K; k++) {
          for( int m = 0; m < M; m++) {
            tempx[m] = xval[k*ldx + m];
          }
#pragma omp simd
          for (ghost_lidx n = 0; n < N; n++) {
            iT sum = 0;
            for (ghost_lidx m = 0; m < M; m++) {
              T* alignedPtr = (T*) __builtin_assume_aligned( tempw + m*N_padded, 64 );
              sum += tempx[m] * alignedPtr[n];
            }
            xval[k*ldx + n] = (T) ( xval[k*ldx + n] * dbeta + sum * dalpha);
          }
        }
        free(tempx);
      }
    } else {

#pragma omp parallel
      {
        T* tempx = (T*) malloc(M*sizeof(T));
#pragma omp for schedule(static)
        for (ghost_gidx k = 0; k < K; k++) {
          for( int m = 0; m < M; m++) {
            tempx[m] = xval[k*ldx + m];
          }
#pragma omp simd
          for (ghost_lidx n = 0; n < N; n++) {
            iT sum = 0;
            iT sum2 = 0;
            iT sum3 = 0;
            iT sum4 = 0;
#pragma vector aligned
            for (ghost_lidx m = 0; m < M-(M%4); m+=4) {
              T* alignedPtr1 = (T*) __builtin_assume_aligned( tempw + m*N_padded, 64 );
              T* alignedPtr2 =  (T*)__builtin_assume_aligned( tempw + (m+1)*N_padded, 64 );
              T* alignedPtr3 = (T*) __builtin_assume_aligned( tempw + (m+2)*N_padded, 64 );
              T* alignedPtr4 =  (T*)__builtin_assume_aligned( tempw + (m+3)*N_padded, 64 );
              sum += tempx[m] * alignedPtr1[n];
              sum2 += tempx[m+1] * alignedPtr2[n];
              sum3 += tempx[m+2] * alignedPtr3[n];
              sum4 += tempx[m+3] * alignedPtr4[n];
            }
#pragma vector aligned
            for (ghost_lidx m = M - (M%4); m < M; m++) {
              T* alignedPtr1 = (T*) __builtin_assume_aligned( tempw + m*N_padded, 32 );
              sum += tempx[m] * alignedPtr1[n];
            }
            sum += sum2;
            sum3 += sum4;
            sum += sum3;
            xval[k*ldx + n] = (T) ( xval[k*ldx + n] * dbeta + sum * dalpha);
          }
        }
        free(tempx);
      }
    }
    free(tempw);
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH)
    return ret;
}
}


ghost_error ghost_tsmm_inplace__u_plain_x_x_x(ghost_densemat *x, ghost_densemat *w, void *alpha, void *beta)
{

    if (x->traits.datatype & GHOST_DT_REAL) {
        if (x->traits.datatype & GHOST_DT_DOUBLE && w->traits.datatype & GHOST_DT_DOUBLE) {
            return tsmm_inplace<double, double>(x, w, alpha, beta);
        } else if (x->traits.datatype & GHOST_DT_FLOAT && w->traits.datatype & GHOST_DT_FLOAT) {
            return tsmm_inplace<float, float>(x, w, alpha, beta);
        } else if (x->traits.datatype & GHOST_DT_FLOAT && w->traits.datatype & GHOST_DT_DOUBLE) {
            return tsmm_inplace<float, double>(x, w, alpha, beta);
        }
    } else if (x->traits.datatype & GHOST_DT_COMPLEX) {
        if (x->traits.datatype & GHOST_DT_DOUBLE) {
            return tsmm_inplace<std::complex<double>, std::complex<double>>(x, w, alpha, beta);
        } else if (x->traits.datatype & GHOST_DT_FLOAT) {
            return tsmm_inplace<std::complex<float>, std::complex<float>>(x, w, alpha, beta);
        }
    }
    return GHOST_ERR_DATATYPE;
}
