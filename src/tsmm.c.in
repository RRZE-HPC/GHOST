#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/math.h"
#include "ghost/instr.h"
#include "ghost/util.h"
#include "ghost/tsmm_gen.h"

#GHOST_FUNC_BEGIN#BLOCKSZ1=${CFG_BLOCKVECTOR_SIZES}#BLOCKSZ2=${CFG_BLOCKVECTOR_SIZES}
ghost_error_t ghost_tsmm__u_plain_d_BLOCKSZ1_BLOCKSZ2(ghost_densemat_t *x, ghost_densemat_t *v, ghost_densemat_t *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    ghost_error_t ret = GHOST_SUCCESS;

    ghost_lidx_t k = w->traits.ncols;
    ghost_lidx_t m = v->traits.ncols;
    ghost_lidx_t n = v->traits.nrows;

    INFO_LOG("In TSMM with two fixed block sizes %"PRLIDX"x%"PRLIDX" <- %"PRLIDX"x%"PRLIDX" * %"PRLIDX"x%"PRLIDX,n,k,n,m,m,k);

    double * const restrict vval = NULL, * const restrict wval = NULL, * restrict xval;
    ghost_lidx_t ldv, ldw, ldx;

    ldv = *v->stride;
    ldw = *w->stride;
    ldx = *x->stride;

    ghost_densemat_valptr(v,(void **)&vval);
    ghost_densemat_valptr(w,(void **)&wval);
    ghost_densemat_valptr(x,(void **)&xval);

    double dalpha = *(double *)alpha;
    double dbeta = *(double *)beta;
    ghost_lidx_t i,j,s;

    double tmp;
    
#pragma omp parallel for private(j,s,tmp) schedule(runtime)
    for (i=0; i<n; i++) {
#if BLOCKSZ1>1
#pragma simd
#endif
        for (s=0; s<BLOCKSZ1; s++) {
            tmp = dbeta*xval[i*ldx+s];
            for (j=0; j<BLOCKSZ2; j++) {
                tmp += dalpha*vval[i*ldv+j]*wval[s*ldw+j];
            }
            xval[i*ldx+s] = tmp;
        }
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    return ret;
}
#GHOST_FUNC_END

ghost_error_t ghost_tsmm__u_plain_d_x_x(ghost_densemat_t *x, ghost_densemat_t *v, ghost_densemat_t *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    ghost_error_t ret = GHOST_SUCCESS;

    ghost_lidx_t k = w->traits.ncols;
    ghost_lidx_t m = v->traits.ncols;
    ghost_lidx_t n = v->traits.nrows;

    
    INFO_LOG("In TSMM with arbitrary block sizes %"PRLIDX"x%"PRLIDX" <- %"PRLIDX"x%"PRLIDX" * %"PRLIDX"x%"PRLIDX,n,k,n,m,m,k);

    double * const restrict vval = NULL, * const restrict wval = NULL, * restrict xval;
    ghost_lidx_t ldv, ldw, ldx;

    ldv = *v->stride;
    ldw = *w->stride;
    ldx = *x->stride;

    ghost_densemat_valptr(v,(void **)&vval);
    ghost_densemat_valptr(w,(void **)&wval);
    ghost_densemat_valptr(x,(void **)&xval);

    double dalpha = *(double *)alpha;
    double dbeta = *(double *)beta;
    ghost_lidx_t i,j,s;
    
    if (w->traits.ncolspadded <= 4) 
    {
#pragma omp parallel for private(j,s) schedule(runtime)
        for (i=0; i<n; i++) {
            for (s=0; s<w->traits.ncols; s++) {
                xval[i*ldx+s] = dbeta*xval[i*ldx+s];
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
                for (j=0; j<m; j++) {
                    xval[i*ldx+s] += dalpha*vval[i*ldv+j]*wval[s*ldw+j];
                }
            }
        }
    } 
    else 
    {
#pragma omp parallel for private(j,s) schedule(runtime)
        for (i=0; i<n; i++) {
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
            for (s=0; s<w->traits.ncols; s++) {
                xval[i*ldx+s] = dbeta*xval[i*ldx+s];
            }
            for (j=0; j<m; j++) {
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
                for (s=0; s<w->traits.ncols; s++) {
                    xval[i*ldx+s] += dalpha*vval[i*ldv+j]*wval[s*ldw+j];
                }
            }
        }
    }    

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    return ret;
}

ghost_error_t ghost_tsmm__u_plain_z_x_x(ghost_densemat_t *x, ghost_densemat_t *v, ghost_densemat_t *w, void *alpha, void *beta)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    ghost_error_t ret = GHOST_SUCCESS;

    ghost_lidx_t k = w->traits.ncols;
    ghost_lidx_t m = v->traits.ncols;
    ghost_lidx_t n = v->traits.nrows;

    
    INFO_LOG("In TSMM with arbitrary block sizes %"PRLIDX"x%"PRLIDX" <- %"PRLIDX"x%"PRLIDX" * %"PRLIDX"x%"PRLIDX,n,k,n,m,m,k);

    double complex * const restrict vval = NULL, * const restrict wval = NULL, * restrict xval;
    ghost_lidx_t ldv, ldw, ldx;

    ldv = *v->stride;
    ldw = *w->stride;
    ldx = *x->stride;

    ghost_densemat_valptr(v,(void **)&vval);
    ghost_densemat_valptr(w,(void **)&wval);
    ghost_densemat_valptr(x,(void **)&xval);

    double complex dalpha = *(double complex *)alpha;
    double complex dbeta = *(double complex *)beta;
    ghost_lidx_t i,j,s;
    
    if (w->traits.ncolspadded <= 4) 
    {
#pragma omp parallel for private(j,s) schedule(runtime)
        for (i=0; i<n; i++) {
            for (s=0; s<w->traits.ncols; s++) {
                xval[i*ldx+s] = dbeta*xval[i*ldx+s];
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
                for (j=0; j<m; j++) {
                    xval[i*ldx+s] += dalpha*vval[i*ldv+j]*wval[s*ldw+j];
                }
            }
        }
    } 
    else 
    {
#pragma omp parallel for private(j,s) schedule(runtime)
        for (i=0; i<n; i++) {
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
            for (s=0; s<w->traits.ncols; s++) {
                xval[i*ldx+s] = dbeta*xval[i*ldx+s];
            }
            for (j=0; j<m; j++) {
#pragma simd
#pragma vector aligned
#pragma vector always
#pragma ivdep
                for (s=0; s<w->traits.ncols; s++) {
                    xval[i*ldx+s] += dalpha*vval[i*ldv+j]*wval[s*ldw+j];
                }
            }
        }
    }    

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)
    return ret;
}
