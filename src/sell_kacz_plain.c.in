/*!GHOST_AUTOGEN CHUNKHEIGHT;BLOCKDIM1 */
#include "ghost/config.h"
#include "ghost/types.h"
#include "ghost/util.h"
#include "ghost/math.h"
#include "ghost/sell_kacz_plain_gen.h"
#include <omp.h>
#include "iaca/iacaMarks.h"

#GHOST_SUBST NVECS ${BLOCKDIM1}
#GHOST_SUBST CHUNKHEIGHT ${CHUNKHEIGHT}

#define LOOPINCHUNK(start, end) \
  for (int rowinchunk = start; rowinchunk < end; rowinchunk++) { \
        row = rowinchunk + fchunk*CHUNKHEIGHT;\
        rownorm = 0.; \
        ghost_lidx idx = sellmat->chunkStart[fchunk]+rowinchunk;\
        scal  = -bval[row];\
        \
        for (int j=0; j<sellmat->rowLen[row]; ++j) {\
            scal += (double)mval[idx] * xval[sellmat->col[idx]];\
            rownorm[rowinchunk] += mval[idx]*mval[idx];\
            idx += CHUNKHEIGHT;\
        }\
        \
        idx -= CHUNKHEIGHT*sellmat->rowLen[row];\
        scal /= (double)rownorm[rowinchunk];\
        \
        for (int j=0; j<sellmat->rowLen[row]; j++) {\
            xval[sellmat->col[idx]] = xval[sellmat->col[idx]] - omega * scal * (double)mval[idx];\
            idx += CHUNKHEIGHT;\
         }\
    }\

ghost_error ghost_kacz__u_plain_d_d_cm_CHUNKHEIGHT_NVECS(ghost_densemat *x, ghost_sparsemat *mat, ghost_densemat *b, ghost_kacz_opts opts)
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
   
    if (!mat->color_ptr || mat->ncolors == 0 ) {
    
    ghost_lidx threads[1] ;

   #pragma omp parallel      
    {  
       #pragma omp master  
       {
        threads[0] = ghost_omp_nthread();
       }
    } 
   if(threads[0] > 1)
   {
     ERROR_LOG("KACZ: Matrix not colored and you are trying to use more than 1 thread");
     GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
     return GHOST_ERR_NOT_COLORED;
   } else {
     mat->ncolors = 1;
     int *new_color;
     new_color = (int*) malloc(2);
     new_color[0]=0;
     new_color[1]=mat->nrows ;
     mat->color_ptr = new_color;        
  } 
 } 

    if (x->traits.ncols > 1) {
        ERROR_LOG("Multi-vec not implemented!");
        return GHOST_ERR_NOT_IMPLEMENTED;
    }

    ghost_lidx c;
    ghost_lidx row;
    ghost_lidx rowinchunk;
    ghost_lidx j;
    ghost_lidx color;
    ghost_sell *sellmat = SELL(mat);
    ghost_lidx fchunk, lchunk, rem_fchunk, rem_lchunk;

    double *bval = NULL;
    if(b!=NULL) 
       bval = (double *)(b->val);

    double *xval = (double *)(x->val);
    double *mval = (double *)sellmat->val;
    double omega = *(double *)opts.omega;

    ghost_lidx firstcolor, lastcolor, stride;
    
    if (opts.direction == GHOST_KACZ_DIRECTION_FORWARD) {
        firstcolor = 0;
        lastcolor = mat->ncolors;
        stride = 1;
    } else {
        firstcolor = mat->ncolors;
        lastcolor = 0;
        stride = -1;
    }

    
    for (color=firstcolor; color!=lastcolor; color+=stride) {
       if (opts.direction == GHOST_KACZ_DIRECTION_FORWARD) {
  		 fchunk = mat->color_ptr[color]/CHUNKHEIGHT;
                 rem_fchunk = mat->color_ptr[color]%CHUNKHEIGHT;
       		 lchunk = mat->color_ptr[color+1]/CHUNKHEIGHT;
                 rem_lchunk = (mat->color_ptr[color+1]-1)%CHUNKHEIGHT;
  
        } else {
	 	 fchunk = (mat->color_ptr[color]-1)/CHUNKHEIGHT;
                 rem_fchunk = (mat->color_ptr[color]-1)%CHUNKHEIGHT;
                 lchunk = (mat->color_ptr[color-1]-1)/CHUNKHEIGHT;
                 rem_lchunk = (mat->color_ptr[color-1])%CHUNKHEIGHT;
          }

#pragma omp parallel
        { 
            double rownorm = 0;
            if(opts.direction == GHOST_KACZ_DIRECTION_FORWARD) {  
            //LOOPINCHUNK(rem_fchunk, MIN(CHUNKHEIGHT, (lchunk-fchunk)*CHUNKHEIGHT+rem_lchunk+1));
            //first handle reminder of fchunk
#pragma omp single private(j,row,rowinchunk) nowait 
                for (rowinchunk = rem_fchunk; rowinchunk <= MIN(CHUNKHEIGHT-1, (lchunk-fchunk)*CHUNKHEIGHT+rem_lchunk); rowinchunk++) {
                    row = rowinchunk + fchunk*CHUNKHEIGHT;
                    //printf("projecting to row ........ %d\n",row);
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[fchunk]+rowinchunk;
                    double scal = 0;
                    if(bval!=NULL)
                     scal  = -bval[row];
                    
                    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                 
                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    
                   scal /= (double)rownorm;

 		#pragma simd vectorlength(4)
                   for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] - omega * scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                }
#pragma omp for private(j,row,rowinchunk) 
            for (c=fchunk+1; c<lchunk-1; c++){
                    for (rowinchunk = 0; rowinchunk < CHUNKHEIGHT; rowinchunk++) {
                    row = rowinchunk + c*CHUNKHEIGHT;
                    //printf("projecting to row ........ %d\n",row); 
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[c]+rowinchunk;
                    double scal  = 0;
                    if(bval!=NULL)
                      scal = -bval[row];
                   
                    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                    
                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    scal /= (double)rownorm;
                    scal *= omega;

		 #pragma simd vectorlength(4)
                    for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] -  scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                
                }
            }         
            //now handle last chunk
            if(fchunk < lchunk-1){  
#pragma omp single private(j,row,rowinchunk) nowait 
                for(rowinchunk = 0; rowinchunk <= rem_lchunk; rowinchunk++) {
                    row = rowinchunk + (lchunk-1)*CHUNKHEIGHT;
                    //printf("projecting to row ........ %d\n",row);
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[lchunk-1]+rowinchunk;

                    double scal  = 0;
                    if(bval!=NULL)  
                      scal = -bval[row];

                    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }

                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    scal /= (double)rownorm;
                    scal *= omega;

 		 #pragma simd vectorlength(4)
                    for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] - scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                }
            }
        } else {
#pragma omp single private(j,row,rowinchunk) nowait 
                for (rowinchunk = rem_fchunk; rowinchunk >= MAX(0,(lchunk-fchunk)*CHUNKHEIGHT + rem_lchunk); rowinchunk--) {
                    row = rowinchunk + fchunk*CHUNKHEIGHT;
                    //  printf("Reverse row .....................%d color .........%d\n",row);
                    //printf("projecting to row ........ %d\n",row);
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[fchunk]+rowinchunk;

                    double scal  = 0;
                    if(bval!=NULL)
                     scal = -bval[row];
                  
		    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }

                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    scal /= (double)rownorm;
                    scal *= omega;

		 #pragma simd vectorlength(4)
                    for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] - scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                }

#pragma omp for private(j,row,rowinchunk)
            for (c=fchunk-1; c>lchunk+1; --c) {
                for (rowinchunk = CHUNKHEIGHT-1; rowinchunk > -1 ; rowinchunk--) {
                    row = rowinchunk + c*CHUNKHEIGHT;
                    //printf("projecting to row ........ %d\n",row);
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[c]+rowinchunk;

                    double scal  = 0;
                    if(bval!=NULL)
                     scal = -bval[row];
                    
 		    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }

                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    scal /= (double)rownorm;
                    scal *= omega;

                   #pragma simd vectorlength(4)
                    for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] -  scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                }
            }

            if(fchunk > lchunk+1){
#pragma omp single private(j,row,rowinchunk) nowait 
                for(rowinchunk = 0; rowinchunk >= rem_lchunk; rowinchunk--) {
                    row = rowinchunk + (lchunk+1)*CHUNKHEIGHT;
                    //printf("projecting to row ........ %d\n",row);
                    rownorm = 0.;
                    ghost_lidx idx = sellmat->chunkStart[lchunk+1]+rowinchunk;

                    double scal  = 0;
                    if(bval!=NULL)    
                     scal = -bval[row];
                    
 		    for (j=0; j<sellmat->rowLen[row]; ++j) {
                        scal += (double)mval[idx] * xval[sellmat->col[idx]];
                        rownorm += mval[idx]*mval[idx];
                        idx += CHUNKHEIGHT;
                    }

                    idx -= CHUNKHEIGHT*sellmat->rowLen[row];
                    scal /= (double)rownorm;
                    scal *= omega;
                     
                  #pragma simd vectorlength(4)
                    for (j=0; j<sellmat->rowLen[row]; j++) {
                        xval[sellmat->col[idx]] = xval[sellmat->col[idx]] - scal * (double)mval[idx];
                        idx += CHUNKHEIGHT;
                    }
                }
            }

          } 

        }
    }   
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}


