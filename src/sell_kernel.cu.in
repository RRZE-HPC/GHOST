#include "ghost/config.h"
#undef GHOST_HAVE_MPI
#undef GHOST_HAVE_INSTR_LIKWID
#include "ghost/types.h"
#include "ghost/sell.h"
#include "ghost/complex.h"
#include "ghost/instr.h"
#include "ghost/log.h"
#include "ghost/error.h"
#include "ghost/util.h"
#include "ghost/math.h"

#include <cuComplex.h>
#include <stdio.h>
#include <cuda_runtime.h>
#include <cuda.h>
#include <complex.h>
#include <cub/cub.cuh>

#include "ghost/cu_complex.h"
#include "ghost/cu_sell_kernel.h"

#define MAX_COLS_PER_BLOCK 32
#define SELL_CUDA_THREADSPERBLOCK 1024
#define LOCALDOT_ONTHEFLY

#define CALL(func,dt1,dt2,C,b1,b2,b3,b4,...){\
    func<dt1,dt2,C,b1,b2,b3,b4><<<__VA_ARGS__>>>((dt2 *)lhs->cu_val,*(int *)(lhs->stride),(dt2 *)rhs->cu_val,*(int *)rhs->stride,flags,mat->nrows,SELL(mat)->cumat->rowLen,SELL(mat)->cumat->col,(dt1 *)SELL(mat)->cumat->val,SELL(mat)->cumat->chunkStart,(dt2 *)cu_shift,(dt2)scale,(dt2)beta,(dt2 *)cu_localdot);\
}\

#define SWITCH_BOOLS(func,dt1,dt2,C,...)\
    if (flags & GHOST_SPMV_AXPBY || flags & GHOST_SPMV_AXPY) {\
        if (flags & GHOST_SPMV_SCALE) {\
            if (flags & (GHOST_SPMV_VSHIFT | GHOST_SPMV_SHIFT)) {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,true,true,true,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,true,true,true,false,__VA_ARGS__)\
                }\
            } else {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,true,true,false,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,true,true,false,false,__VA_ARGS__)\
                }\
            }\
        } else {\
            if (flags & (GHOST_SPMV_VSHIFT | GHOST_SPMV_SHIFT)) {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,true,false,true,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,true,false,true,false,__VA_ARGS__)\
                }\
            } else {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,true,false,false,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,true,false,false,false,__VA_ARGS__)\
                }\
            }\
        }\
    } else {\
        if (flags & GHOST_SPMV_SCALE) {\
            if (flags & (GHOST_SPMV_VSHIFT | GHOST_SPMV_SHIFT)) {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,false,true,true,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,false,true,true,false,__VA_ARGS__)\
                }\
            } else {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,false,true,false,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,false,true,false,false,__VA_ARGS__)\
                }\
            }\
        } else {\
            if (flags & (GHOST_SPMV_VSHIFT | GHOST_SPMV_SHIFT)) {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,false,false,true,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,false,false,true,false,__VA_ARGS__)\
                }\
            } else {\
                if (flags & GHOST_SPMV_DOT) {\
                    CALL(func,dt1,dt2,C,false,false,false,true,__VA_ARGS__)\
                } else {\
                    CALL(func,dt1,dt2,C,false,false,false,false,__VA_ARGS__)\
                }\
            }\
        }\
    }\

#define SELL_C_VARIANTS(kernel,dt1,dt2,grid,block,smem)\
    ${SELL_CHUNKHEIGHT_IFS}


#ifdef LOCALDOT_ONTHEFLY
#define PROCESS_LOCALDOT(dt2_host)\
    GHOST_INSTR_START(spmv_cuda_dot_reduction)\
int col;\
double *cu_finaldot1;\
ghost_cu_malloc((void **)&cu_finaldot1,sizeof(dt2_host)*rhs->traits.ncols);\
for (col=0; col<rhs->traits.ncols; col++) {\
    void *d_temp_storage = NULL;\
    size_t temp_storage_bytes = 0;\
    cub::DeviceReduce::Sum(d_temp_storage,temp_storage_bytes,(double *)cu_localdot,(double *)cu_localdot,grid.x);\
    ghost_cu_malloc((void **)&d_temp_storage,temp_storage_bytes);\
    cub::DeviceReduce::Sum(d_temp_storage,temp_storage_bytes,&((double *)cu_localdot)[grid.x*col],&((double *)cu_localdot)[col],grid.x);\
    cub::DeviceReduce::Sum(d_temp_storage,temp_storage_bytes,&((double *)cu_localdot)[rhs->traits.ncols*grid.x+grid.x*col],&((double *)cu_localdot)[rhs->traits.ncols*grid.x+col],grid.x);\
    cub::DeviceReduce::Sum(d_temp_storage,temp_storage_bytes,&((double *)cu_localdot)[2*rhs->traits.ncols*grid.x+grid.x*col],&((double *)cu_localdot)[2*rhs->traits.ncols*grid.x+col],grid.x);\
}\
GHOST_CALL_RETURN(ghost_cu_download(localdot,cu_localdot,rhs->traits.ncols*sizeof(dt2_host)));\
GHOST_CALL_RETURN(ghost_cu_download(&localdot[rhs->traits.ncols],&cu_localdot[rhs->traits.ncols*grid.x],rhs->traits.ncols*sizeof(dt2_host)));\
GHOST_CALL_RETURN(ghost_cu_download(&localdot[2*rhs->traits.ncols],&cu_localdot[2*rhs->traits.ncols*grid.x],rhs->traits.ncols*sizeof(dt2_host)));\
GHOST_INSTR_STOP(spmv_cuda_dot_reduction)
#else
#define PROCESS_LOCALDOT(dt2_host)\
    GHOST_INSTR_START(spmv_cuda_dot)\
INFO_LOG("Not doing the local dot product on-the-fly!");\
memset(localdot,0,rhs->traits.ncols*3*sizeof(dt2_host));\
lhs->dot(lhs,&localdot[0],lhs);\
lhs->dot(lhs,&localdot[rhs->traits.ncols],rhs);\
lhs->dot(rhs,&localdot[2*rhs->traits.ncols],rhs);\
GHOST_INSTR_STOP(spmv_cuda_dot)
#endif

#define CHOOSE_KERNEL(dt1,dt2,dt2_host) {\
    ghost_error_t ret = GHOST_SUCCESS;\
    int cu_device;\
    GHOST_CALL_RETURN(ghost_cu_device(&cu_device));\
    dt2 *cu_localdot = NULL;\
    dt2 *cu_shift = NULL;\
    dt2_host *localdot = NULL;\
    dt2 *shift, scale, beta;\
    dim3 block, grid;\
    GHOST_SPMV_PARSE_ARGS(flags,argp,scale,beta,shift,localdot,dt2_host,dt2);\
    if (flags & GHOST_SPMV_AXPY) {\
        dt2_host hbeta = 1.;\
        beta = *((dt2 *)&hbeta);\
    }\
    size_t shiftsize = sizeof(dt2)*(flags & (GHOST_SPMV_VSHIFT|GHOST_SPMV_SHIFT)?rhs->traits.ncols:0);\
    GHOST_CALL_RETURN(ghost_cu_malloc((void **)&cu_shift,shiftsize));\
    if (flags & GHOST_SPMV_SHIFT) {\
        INFO_LOG("scatter shift %zu bytes",shiftsize);\
        ghost_lidx_t c;\
        for (c=0; c<rhs->traits.ncols; c++) {\
            GHOST_CALL_RETURN(ghost_cu_upload(&cu_shift[c],shift,sizeof(dt2)));\
        }\
    } else {\
        GHOST_CALL_RETURN(ghost_cu_upload(cu_shift,shift,shiftsize));\
    }\
    struct cudaDeviceProp prop;\
    CUDA_CALL_RETURN(cudaGetDeviceProperties(&prop,cu_device));\
    GHOST_INSTR_START(spmv_cuda)\
    if (rhs->traits.storage == GHOST_DENSEMAT_COLMAJOR) {\
        block.x = SELL_CUDA_THREADSPERBLOCK/MIN(MAX_COLS_PER_BLOCK,rhs->traits.ncols);\
        block.y = MIN(MAX_COLS_PER_BLOCK,rhs->traits.ncols);\
        grid.x = (int)ceil(mat->nrowsPadded/(double)block.x);\
        grid.y = (int)(ceil(rhs->traits.ncols/(double)MAX_COLS_PER_BLOCK));\
        size_t reqSmem = 0;\
        if (flags & GHOST_SPMV_DOT) {\
            reqSmem = sizeof(dt2)*32*block.y*3;\
        }\
        if (prop.sharedMemPerBlock < reqSmem) {\
            WARNING_LOG("Not enough shared memory available! CUDA kernel will not execute!");\
        }\
        INFO_LOG("grid %dx%d block %dx%d shmem %zu",grid.x,grid.y,block.x,block.y,reqSmem);\
        GHOST_CALL_RETURN(ghost_cu_malloc((void **)&cu_localdot,sizeof(dt2)*rhs->traits.ncols*3*grid.x));\
        SWITCH_BOOLS(SELL_kernel_CU_tmpl,dt1,dt2,32,grid,block,reqSmem)\
    } else {\
        INFO_LOG("Experimental row-major CUDA SELL-SpMMV");\
        /*block.x = MIN(MAX_COLS_PER_BLOCK,rhs->traits.ncols);*/\
        block.x = 32;\
        block.y = SELL_CUDA_THREADSPERBLOCK/block.x;\
        grid.x = (int)ceil(mat->nrows/((double)block.y*block.x/rhs->traits.ncols));\
        grid.y = (int)(ceil(rhs->traits.ncols/(double)MAX_COLS_PER_BLOCK));\
        size_t reqSmem = 0;\
        if (flags & GHOST_SPMV_DOT) {\
            /*reqSmem = sizeof(dt2)*3*32*block.x;*/\
            /*reqSmem = sizeof(dt2)*block.x*block.y*3;*/\
            /*reqSmem = sizeof(dt2)*32*block.x;*/\
        }\
        if (prop.sharedMemPerBlock < reqSmem) {\
            WARNING_LOG("Not enough shared memory available! CUDA kernel will not execute!");\
        }\
        INFO_LOG("grid %dx%d block %dx%d shmem %zu",grid.x,grid.y,block.x,block.y,reqSmem);\
        GHOST_CALL_RETURN(ghost_cu_malloc((void **)&cu_localdot,sizeof(dt2)*rhs->traits.ncols*3*grid.x));\
        SELL_C_VARIANTS(SELL_kernel_CU_rm_tmpl,dt1,dt2,grid,block,reqSmem)\
        /*SWITCH_BOOLS(SELL_kernel_CU_rm_tmpl,dt1,dt2,32,grid,block,reqSmem)*/\
    }\
    cudaDeviceSynchronize();\
    GHOST_INSTR_STOP(spmv_cuda)\
    if (flags & GHOST_SPMV_DOT) {\
        PROCESS_LOCALDOT(dt2_host)\
    }\
    GHOST_CALL_RETURN(ghost_cu_free(cu_localdot));\
    GHOST_CALL_RETURN(ghost_cu_free(cu_shift));\
    return ret;\
}

    template<typename m_t, typename v_t, int C, bool do_axpby, bool do_scale, bool do_vshift, bool do_localdot>  
__global__ void SELL_kernel_CU_rm_tmpl(v_t * const __restrict__ lhs, const int lhs_lda, const v_t * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const m_t * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const v_t * const __restrict__ shift, const v_t alpha, const v_t beta, v_t * const __restrict__ localdot)
{
    int i = threadIdx.y+blockIdx.x*blockDim.y;
    int col = blockDim.x*blockIdx.y+threadIdx.x;

    if (i<nrows) {
        int cs, tid;
        if (C == blockDim.y) {
            cs = chunkstart[blockIdx.x];
            tid = threadIdx.y;
        } else {
            cs = chunkstart[i/C];
            tid = threadIdx.y%C;
        }
        int j;
        v_t tmp;

        zero<v_t>(tmp);

        for (j=0; j<rowlen[i]; j++) {
            tmp = axpy<v_t,m_t>(tmp, rhs[rhs_lda*mcol[cs + tid + j*C]+col], val[cs+tid+j*C]);
        }

        if (do_vshift) {
            tmp = axpy<v_t,v_t>(tmp,rhs[rhs_lda*i+col],scale2<v_t,float>(shift[col],-1.f));
        }
        if (do_scale) {
            tmp = scale<v_t>(alpha,tmp);
        }
        if (do_axpby) {
            lhs[lhs_lda*i+col] = axpy<v_t,v_t>(tmp,lhs[lhs_lda*i+col],beta);
        } else {
            lhs[lhs_lda*i+col] = tmp;
        }
    }
#ifdef LOCALDOT_ONTHEFLY 
    if (do_localdot) {
        v_t dot1, dot2, dot3;
        zero<v_t>(dot1);
        zero<v_t>(dot2);
        zero<v_t>(dot3);

        i = threadIdx.x+blockIdx.x*blockDim.y;
        col = blockDim.x*blockIdx.y+threadIdx.y;

        __syncthreads();
        if (i<nrows) {
            dot1 = axpy<v_t>(dot1,lhs[lhs_lda*i+col],lhs[lhs_lda*i+col]);
            dot2 = axpy<v_t>(dot2,rhs[rhs_lda*i+col],lhs[lhs_lda*i+col]);
            dot3 = axpy<v_t>(dot3,rhs[rhs_lda*i+col],rhs[rhs_lda*i+col]);
        }

        dot1 = ghost_warpReduceSum(dot1);
        dot2 = ghost_warpReduceSum(dot2);
        dot3 = ghost_warpReduceSum(dot3);

        if (threadIdx.x==0) {
            localdot[0*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot1;
            localdot[1*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot2;
            localdot[2*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot3;
        }
    }
#endif

}

    template<>  
__global__ void SELL_kernel_CU_rm_tmpl<double,double,32,true,true,true,true>(double * const __restrict__ lhs, const int lhs_lda, const double * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const double * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const double * const __restrict__ shift, const double alpha, const double beta, double * const __restrict__ localdot)
{
    int i = threadIdx.y+blockIdx.x*blockDim.y;
    int col = blockDim.x*blockIdx.y+threadIdx.x;

    if (i<nrows) {
        int cs, tid;
        if (32 == blockDim.y) {
            cs = chunkstart[blockIdx.x];
            tid = threadIdx.y;
        } else {
            cs = chunkstart[i/32];
            tid = threadIdx.y%32;
        }
        int j;
        double tmp = 0.;

        for (j=0; j<rowlen[i]; j++) {
            tmp += rhs[rhs_lda*mcol[cs + tid + j*32]+col] * val[cs+tid+j*32];
        }

        lhs[lhs_lda*i+col] = lhs[lhs_lda*i+col]*beta + alpha*(tmp-rhs[rhs_lda*i+col]*shift[col]);
    }
#ifdef LOCALDOT_ONTHEFLY 

    double3 dot;
    zero<double>(dot.x);
    zero<double>(dot.y);
    zero<double>(dot.z);

    i = threadIdx.x+blockIdx.x*blockDim.y;
    col = blockDim.x*blockIdx.y+threadIdx.y;

    __syncthreads();
    if (i<nrows) {
        dot.x = lhs[lhs_lda*i+col] * lhs[lhs_lda*i+col];
        dot.y = rhs[rhs_lda*i+col] * lhs[lhs_lda*i+col];
        dot.z = rhs[rhs_lda*i+col] * rhs[rhs_lda*i+col];
    }

    dot = ghost_warpReduceSum(dot);

    if (threadIdx.x==0) {
        localdot[0*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.x;
        localdot[1*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.y;
        localdot[2*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.z;
    }
#endif
}
    
    template<>  
__global__ void SELL_kernel_CU_rm_tmpl<double,double,1,true,true,true,true>(double * const __restrict__ lhs, const int lhs_lda, const double * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const double * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const double * const __restrict__ shift, const double alpha, const double beta, double * const __restrict__ localdot)
{
    int i = threadIdx.y+blockIdx.x*blockDim.y;
    int col = blockDim.x*blockIdx.y+threadIdx.x;

    if (i<nrows) {
        int cs, tid;
        if (1 == blockDim.y) {
            cs = chunkstart[blockIdx.x];
            tid = threadIdx.y;
        } else {
            cs = chunkstart[i/1];
            tid = threadIdx.y%1;
        }
        int j;
        double tmp = 0.;

        for (j=0; j<rowlen[i]; j++) {
            tmp += rhs[rhs_lda*mcol[cs + tid + j*1]+col] * val[cs+tid+j*1];
        }

        lhs[lhs_lda*i+col] = lhs[lhs_lda*i+col]*beta + alpha*(tmp-rhs[rhs_lda*i+col]*shift[col]);
    }
#ifdef LOCALDOT_ONTHEFLY 

    double3 dot;
    zero<double>(dot.x);
    zero<double>(dot.y);
    zero<double>(dot.z);

    i = threadIdx.x+blockIdx.x*blockDim.y;
    col = blockDim.x*blockIdx.y+threadIdx.y;

    __syncthreads();
    if (i<nrows) {
        dot.x = lhs[lhs_lda*i+col] * lhs[lhs_lda*i+col];
        dot.y = rhs[rhs_lda*i+col] * lhs[lhs_lda*i+col];
        dot.z = rhs[rhs_lda*i+col] * rhs[rhs_lda*i+col];
    }

    dot = ghost_warpReduceSum(dot);

    if (threadIdx.x==0) {
        localdot[0*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.x;
        localdot[1*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.y;
        localdot[2*gridDim.y*blockDim.x*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.z;
    }
#endif
}


/*
   template<>  
   __global__ void SELL_kernel_CU_rm_tmpl<double,double,4,true,true,true,true>(double * const __restrict__ lhs, const int lhs_lda, const double * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const double * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const double * const __restrict__ shift, const double alpha, const double beta, double * const __restrict__ localdot)
   {
   int col = (blockDim.x*blockIdx.y+threadIdx.x)%16;
   int rowinblock = (blockDim.x*blockIdx.y+threadIdx.x)/16;
   int nrowsinblock = blockDim.x*gridDim.y/16;
   int row = nrowsinblock*(blockIdx.x*blockDim.y+threadIdx.y)+rowinblock;

   if (row==0 && col == 0) {
   printf("nrowsinblock %d\n",nrowsinblock);
   }

   if (row<nrows) {
   int cs, rowinchunk;
   cs = chunkstart[row/4];
   rowinchunk = (threadIdx.y*nrowsinblock+rowinblock)%4;
   int j;
   double tmp = 0.;

//if (threadIdx.x == 0) {
printf("thr %d/%d block %d/%d idx %d/%d cs %d rowinchunk %d\n",threadIdx.y,threadIdx.x,blockIdx.x,blockIdx.y,row,col,cs,rowinchunk);
//}

for (j=0; j<rowlen[row]; j++) {
tmp += rhs[rhs_lda*mcol[cs + rowinchunk + j*4]+col] * val[cs + rowinchunk + j*4];
}

lhs[lhs_lda*row+col] = lhs[lhs_lda*row+col]*beta + alpha*(tmp-rhs[rhs_lda*row+col]*shift[col]);
}
#ifdef LOCALDOT_ONTHEFLY 

double3 dot;
zero<double>(dot.x);
zero<double>(dot.y);
zero<double>(dot.z);

row = threadIdx.x+blockIdx.x*blockDim.y;
col = blockDim.x/16*blockIdx.y+threadIdx.y;

__syncthreads();
if (row<nrows) {
dot.x = lhs[lhs_lda*row+col] * lhs[lhs_lda*row+col];
dot.y = rhs[rhs_lda*row+col] * lhs[lhs_lda*row+col];
dot.z = rhs[rhs_lda*row+col] * rhs[rhs_lda*row+col];
}

dot = ghost_warpReduceSum(dot);

if (threadIdx.x==0) {
printf("row %d col %d tid.x %d tid.y %d dot %f\n",row,col,threadIdx.x,threadIdx.y,dot.x);
localdot[0*gridDim.y*blockDim.x/16*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.x;
localdot[1*gridDim.y*blockDim.x/16*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.y;
localdot[2*gridDim.y*blockDim.x/16*gridDim.x + gridDim.x*threadIdx.y + blockIdx.x] = dot.z;
}
#endif
}*/

template<typename m_t, typename v_t, int C, bool do_axpby, bool do_scale, bool do_vshift, bool do_localdot>  
__global__ void SELL_kernel_CU_tmpl(
        v_t * const __restrict__ lhs, const int lhs_lda, const v_t * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const m_t * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const v_t * const __restrict__ shift, const v_t alpha, const v_t beta, v_t * const __restrict__ localdot)
{
    int i = threadIdx.x+blockIdx.x*blockDim.x;
    int col = blockDim.y*blockIdx.y+threadIdx.y;

    if (i<nrows) {
        int cs, tid;
        if (C == blockDim.x) {
            cs = chunkstart[blockIdx.x];
            tid = threadIdx.x;
        } else {
            cs = chunkstart[i/C];
            tid = threadIdx.x%C;
        }
        int j;
        v_t tmp;

        zero<v_t>(tmp);

        for (j=0; j<rowlen[i]; j++) {
            tmp = axpy<v_t,m_t>(tmp, rhs[rhs_lda*col+mcol[cs + tid + j*C]], val[cs+tid+j*C]);
        }

        if (do_vshift) {
            tmp = axpy<v_t,v_t>(tmp,rhs[rhs_lda*col+i],scale2<v_t,float>(shift[col*blockDim.y+threadIdx.y],-1.f));
        }
        if (do_scale) {
            tmp = scale<v_t>(alpha,tmp);
        }
        if (do_axpby) {
            lhs[lhs_lda*col+i] = axpy<v_t,float>(scale<v_t>(lhs[lhs_lda*col+i],beta),tmp,1.f);
        } else {
            lhs[lhs_lda*col+i] = tmp;
        }
    }
#ifdef LOCALDOT_ONTHEFLY 
    if (do_localdot) {
        v_t dot1, dot2, dot3;
        zero<v_t>(dot1);
        zero<v_t>(dot2);
        zero<v_t>(dot3);

        if (i<nrows) {
            dot1 = axpy<v_t>(dot1,lhs[lhs_lda*col+i],lhs[lhs_lda*col+i]);
            dot2 = axpy<v_t>(dot2,rhs[rhs_lda*col+i],lhs[lhs_lda*col+i]);
            dot3 = axpy<v_t>(dot3,rhs[rhs_lda*col+i],rhs[rhs_lda*col+i]);
        } else {
            zero<v_t>(dot1);
            zero<v_t>(dot2);
            zero<v_t>(dot3);
        }

        dot1 = ghost_blockReduceSum(dot1);
        dot2 = ghost_blockReduceSum(dot2);
        dot3 = ghost_blockReduceSum(dot3);

        if (threadIdx.x==0) {
            localdot[0*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot1;
            localdot[1*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot2;
            localdot[2*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot3;
        }
    }
#endif
}

    template<>
__global__ void SELL_kernel_CU_tmpl<double,double,32,true,true,true,true>(double * const __restrict__ lhs, const int lhs_lda, const double * const __restrict__ rhs, const int rhs_lda, const ghost_spmv_flags_t flags, const int nrows, const ghost_lidx_t * const __restrict__ rowlen, const ghost_lidx_t * const __restrict__ mcol, const double * const __restrict__ val, const ghost_lidx_t * const __restrict__ chunkstart, const double * const __restrict__ shift, const double alpha, const double beta, double * const __restrict__ localdot)
{
    int i = threadIdx.x+blockIdx.x*blockDim.x;
    int col = blockDim.y*blockIdx.y+threadIdx.y;

    if (i<nrows) {
        int cs, tid;
        if (32 == blockDim.x) {
            cs = chunkstart[blockIdx.x];
            tid = threadIdx.x;
        } else {
            cs = chunkstart[i/32];
            tid = threadIdx.x%32;
        }
        int j;
        double tmp = 0.;

        for (j=0; j<rowlen[i]; j++) {
            tmp += rhs[rhs_lda*col+mcol[cs + tid + j*32]] * val[cs+tid+j*32];
        }

        lhs[lhs_lda*col+i] = beta*lhs[lhs_lda*col+i] + alpha*(tmp-rhs[rhs_lda*col+i]*shift[col]);
    }
#ifdef LOCALDOT_ONTHEFLY 
    double3 dot;

    if (i<nrows) {
        dot.x = lhs[lhs_lda*col+i]*lhs[lhs_lda*col+i];
        dot.y = rhs[rhs_lda*col+i]*lhs[lhs_lda*col+i];
        dot.z = rhs[rhs_lda*col+i]*rhs[rhs_lda*col+i];
    } else {
        dot.x = 0.;
        dot.y = 0.;
        dot.z = 0.;
    }

    dot = ghost_blockReduceSum(dot);

    if (threadIdx.x==0) {
        localdot[0*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot.x;
        localdot[1*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot.y;
        localdot[2*gridDim.y*blockDim.y*gridDim.x + 3*col + blockIdx.x] = dot.z;
    }
#endif
}

extern "C" ghost_error_t dd_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{
    CHOOSE_KERNEL(double,double,double);
}

extern "C" ghost_error_t ds_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(double,float,float);
}

extern "C" ghost_error_t dc_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(double,cuFloatComplex,complex float);
}

extern "C" ghost_error_t dz_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(double,cuDoubleComplex,complex double);
}

extern "C" ghost_error_t sd_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(float,double,double);
}

extern "C" ghost_error_t ss_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(float,float,float);
}

extern "C" ghost_error_t sc_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(float,cuFloatComplex,complex float);
}

extern "C" ghost_error_t sz_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(float,cuDoubleComplex,complex double);
}

extern "C" ghost_error_t zd_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuDoubleComplex,double,double);
}

extern "C" ghost_error_t zs_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuDoubleComplex,float,float);
}

extern "C" ghost_error_t zc_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuDoubleComplex,cuFloatComplex,complex float);
}

extern "C" ghost_error_t zz_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuDoubleComplex,cuDoubleComplex,complex double);
}

extern "C" ghost_error_t cd_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuFloatComplex,double,double);
}

extern "C" ghost_error_t cs_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuFloatComplex,float,float);
}

extern "C" ghost_error_t cc_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuFloatComplex,cuFloatComplex,complex float);
}

extern "C" ghost_error_t cz_SELL_kernel_CU(ghost_sparsemat_t *mat, ghost_densemat_t *lhs, ghost_densemat_t *rhs, ghost_spmv_flags_t flags, va_list argp)
{ 
    CHOOSE_KERNEL(cuFloatComplex,cuDoubleComplex,complex double);
}

