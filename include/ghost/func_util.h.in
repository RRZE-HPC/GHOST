/**
 * @file func_util.h
 * @brief Utilities for functions.
 * @author Moritz Kreutzer <moritz.kreutzer@fau.de>
 */
#ifndef GHOST_FUNC_UTIL_H
#define GHOST_FUNC_UTIL_H

#include <ghost/util.h>
#include <ghost/task.h>
#include <ghost/core.h>

typedef enum
{
    GHOST_FUNCTYPE_MATH = 1,
    GHOST_FUNCTYPE_UTIL = 2,
    /**
     * @brief Functions involving communication via MPI or CUDA
     */
    GHOST_FUNCTYPE_COMMUNICATION = 4,
    /**
     * @brief Setup of GHOST or creation (no filling with data) data structures    
     */
    GHOST_FUNCTYPE_SETUP = 8,
    /**
     * @brief Functions involving initialization of sparse or dense matrices
     */
    GHOST_FUNCTYPE_INITIALIZATION = 16,
    GHOST_FUNCTYPE_KERNEL = 32,
    GHOST_FUNCTYPE_BENCH = 64,
    /**
     * @brief Functions involving disk I/O
     */
    GHOST_FUNCTYPE_IO = 128,
    /**
     * @brief Teardown of GHOST or destruction data structures    
     */
    GHOST_FUNCTYPE_TEARDOWN = 256,
    /**
     * @brief Functions with tasking or resource managament functionality
     */
    GHOST_FUNCTYPE_TASKING = 512,
    GHOST_FUNCTYPE_SOLVER = 1024
} ghost_functype_t;

#define GHOST_FUNCTYPE_ANY (\
        GHOST_FUNCTYPE_MATH|\
        GHOST_FUNCTYPE_UTIL|\
        GHOST_FUNCTYPE_COMMUNICATION|\
        GHOST_FUNCTYPE_SETUP|\
        GHOST_FUNCTYPE_INITIALIZATION|\
        GHOST_FUNCTYPE_KERNEL|\
        GHOST_FUNCTYPE_BENCH|\
        GHOST_FUNCTYPE_IO|\
        GHOST_FUNCTYPE_SOLVER)

#define GHOST_FUNC_ENTER(functype)\
    int __funcnameoffset;\
    char * __prefixbackup = NULL;\
    char * __prefix = NULL;\
    char * __ghost_functag = NULL;\
    bool __ghost_instr_enable_backup = ghost_instr_enable;\
    if ((${INSTRUMENTATION_FUNCTYPES}) && ${GHOST_HAVE_INSTR}) {\
        ghost_malloc((void**)&__prefix,1024*sizeof(char));\
        ghost_malloc((void**)&__ghost_functag,1024*sizeof(char));\
        __funcnameoffset = strncmp(__FUNCTION__,"ghost_",6)?0:6;\
        __prefixbackup = ghost_instr_prefix_get();\
        snprintf(__ghost_functag,1024,"%s%s",__prefixbackup,\
                __FUNCTION__+__funcnameoffset);\
        snprintf(__prefix,1024,"%s%s->",__prefixbackup,\
            __FUNCTION__+__funcnameoffset);\
        ghost_instr_enable = true;\
        GHOST_INSTR_START(__FUNCTION__+__funcnameoffset);\
        ghost_instr_prefix_set(__prefix);\
    } else {\
        ghost_instr_enable = false;\
    }\
    if ((functype) == (GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL)) {\
        ghost_task_t *cur = NULL;\
        ghost_task_cur(&cur);\
        if (!cur) {\
            PERFWARNING_LOG("A kernel function has been called outside a task!");\
        }else if(cur->nThreads == 0) {\
            PERFWARNING_LOG("A kernel function has been called in a task with 0 threads!");\
        }\
    }\
    if (GHOST_VERBOSITY > 1) {\
        DEBUG_LOG(1,"Enter function %s",__FUNCTION__);\
    } 

#define GHOST_FUNC_EXIT(functype)\
    if ((${INSTRUMENTATION_FUNCTYPES}) && ${GHOST_HAVE_INSTR}) {\
        /*ghost_barrier();*/\
        ghost_instr_prefix_set(__prefixbackup);\
        GHOST_INSTR_STOP(__FUNCTION__+__funcnameoffset);\
        free(__ghost_functag);\
        free(__prefix);\
    }\
    ghost_instr_enable = __ghost_instr_enable_backup;\
    if (GHOST_VERBOSITY > 1) {\
        DEBUG_LOG(1,"Exit function %s",__FUNCTION__);\
    } 

#endif
