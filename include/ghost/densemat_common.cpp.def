#include "ghost/config.h"
#include "ghost/omp.h"

#ifdef GHOST_HAVE_MPI
#include <mpi.h> //mpi.h has to be included before stdio.h
#endif
#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <complex>
#include <stdio.h>

#include "ghost/complex.h"
#include "ghost/rand.h"
#include "ghost/util.h"
#include "ghost/densemat_cm.h"
#include "ghost/densemat_rm.h"
#include "ghost/math.h"
#include "ghost/locality.h"
#include "ghost/log.h"
#include "ghost/machine.h"
#include "ghost/densemat_iter_macros.h"

#ifdef ROWMAJOR
#ifdef COLMAJOR
#error "Only one of ROWMAJOR or COLMAJOR must be defined!"
#endif
#define PREFIX rm
#elif defined (COLMAJOR)
#define PREFIX cm
#else
#error "One of ROWMAJOR or COLMAJOR must be defined!"
#endif


#define PASTER(x,y) x ## _ ## y
#define EVALUATOR(x,y) PASTER(x,y)
#define FUNCNAME(fun) EVALUATOR(ghost_densemat,EVALUATOR(PREFIX,fun))

using namespace std;

template<typename v_t>
static ghost_error_t FUNCNAME(normalize_tmpl(ghost_densemat_t *vec))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH);
    ghost_error_t ret = GHOST_SUCCESS;
    ghost_lidx_t v;
    v_t *s = NULL;

    GHOST_CALL_GOTO(ghost_malloc((void **)&s,vec->traits.ncols*sizeof(v_t)),err,ret);
    GHOST_CALL_GOTO(ghost_dot(s,vec,vec),err,ret);

    for (v=0; v<vec->traits.ncols; v++) {
        s[v] = (v_t)sqrt(s[v]);
        s[v] = (v_t)(((v_t)1.)/s[v]);
    }
    GHOST_CALL_GOTO(vec->vscale(vec,s),err,ret);

    goto out;
err:

out:
    free(s);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH);
    return ret;
}

template <typename v_t> 
static ghost_error_t FUNCNAME(dotprod_tmpl(ghost_densemat_t *vec, void *res, ghost_densemat_t *vec2))
{ 
    // the parallelization is done manually because reduction does not work with ghost_complex numbers
   
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    ghost_error_t ret = GHOST_SUCCESS;
    int nthreads, i;
    v_t *partsums;
    unsigned clsize;

#pragma omp parallel
#pragma omp single
    nthreads = ghost_omp_nthread();
   
    ghost_machine_cacheline_size(&clsize);
    int padding = 8*(int)clsize/sizeof(v_t);
        
    GHOST_CALL_GOTO(ghost_malloc_align((void **)&partsums,nthreads*(vec->traits.ncols+padding)*sizeof(v_t),64),err,ret);
    memset(partsums,0,nthreads*(vec->traits.ncols+padding)*sizeof(v_t));
    
#pragma omp parallel shared(partsums) 
    {
        int tid = ghost_omp_threadnum();
        DENSEMAT_ITER2(vec,vec2,
            partsums[(padding+vec->traits.ncols)*tid+col] += *(v_t *)valptr2 * 
                conjugate((v_t *)valptr1));
    }
    ghost_lidx_t col;
    for (col=0; col<vec->traits.ncols; col++) {
        ((v_t *)res)[col] = 0.;

        for (i=0; i<nthreads; i++) {
            ((v_t *)res)[col] += partsums[i*(vec->traits.ncols+padding)+col];
        }
    }

    goto out;
err:

out:
    free(partsums);
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return ret;
}

template <typename v_t> 
static ghost_error_t FUNCNAME(vaxpy_tmpl(ghost_densemat_t *vec, ghost_densemat_t *vec2, void *scale))
{
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    
    v_t *s = (v_t *)scale;
    
    DENSEMAT_ITER2(vec,vec2,*(v_t *)valptr1 += *(v_t *)valptr2 * s[col]);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

template <typename v_t> 
static ghost_error_t FUNCNAME(vaxpby_tmpl(ghost_densemat_t *vec, ghost_densemat_t *vec2, void *scale, void *b_))
{
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    v_t *s = (v_t *)scale;
    v_t *b = (v_t *)b_;

    DENSEMAT_ITER2(vec,vec2,*(v_t *)valptr1 = *(v_t *)valptr2 * s[col] + 
            *(v_t *)valptr1 * b[col]);
    
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

template<typename v_t> 
static ghost_error_t FUNCNAME(vscale_tmpl(ghost_densemat_t *vec, void *scale))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
        
    DENSEMAT_ITER(vec,*(v_t *)valptr *= ((v_t *)scale)[col]);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

// thread-safe type generic random function, returns pseudo-random numbers between -1 and 1.
template <typename v_t>
static inline void my_rand(unsigned int* state, v_t* result)
{
    // default implementation
    static const v_t scal = (v_t)2.0/(v_t)RAND_MAX;
    static const v_t shift=(v_t)(-1.0);
    *result=(v_t)rand_r(state)*scal+shift;
}

template <typename float_type>
static void my_rand(unsigned int* state, std::complex<float_type>* result)
{
    float_type* ft_res = (float_type*)result;
    my_rand(state,&ft_res[0]);
    my_rand(state,&ft_res[1]);
}

template <typename float_type>
static inline void my_rand(unsigned int* state, ghost_complex<float_type>* result)
{
    my_rand<float_type>(state,(float_type *)result);
    my_rand<float_type>(state,((float_type *)result)+1);
}



template <typename v_t> 
static ghost_error_t FUNCNAME(fromRand_tmpl(ghost_densemat_t *vec))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);
    
    FUNCNAME(malloc(vec));

#pragma omp parallel
    {
        unsigned int *state;
        ghost_rand_get(&state);
        DENSEMAT_ITER(vec,my_rand(state,(v_t *)valptr));
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    return GHOST_SUCCESS;
}

template <typename v_t> 
static ghost_error_t FUNCNAME(fromScalar_tmpl(ghost_densemat_t *vec, void *val))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);
    
    FUNCNAME(malloc(vec));

    DENSEMAT_ITER(vec,*(v_t *)valptr = *(v_t *)val);
    
    vec->upload(vec);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    
    return GHOST_SUCCESS;
}


template <typename v_t> 
static ghost_error_t FUNCNAME(string_tmpl(char **str, ghost_densemat_t *vec))
{
    stringstream buffer;
    buffer << std::setprecision(6)
           << std::right
           << std::scientific
           << std::setw(10);

    if (vec->traits.flags & GHOST_DENSEMAT_DEVICE) {
#ifdef GHOST_HAVE_CUDA
        v_t val;
        GHOST_SINGLETHREAD(DENSEMAT_ITER(vec,ghost_cu_download(&val,cuvalptr,vec->elSize);buffer<<val<<(col==vec->traits.ncols-1?"\n":"\t")));
#endif
    } else {
        GHOST_SINGLETHREAD(DENSEMAT_ITER(vec,buffer<<*(v_t *)valptr<<(col==vec->traits.ncols-1?"\n":"\t")));
    }

    GHOST_CALL_RETURN(ghost_malloc((void **)str,buffer.str().length()+1));
    strcpy(*str,buffer.str().c_str());

    return GHOST_SUCCESS;
}

template <typename v_t> 
static ghost_error_t FUNCNAME(fromVec_tmpl(ghost_densemat_t *vec, ghost_densemat_t *vec2, ghost_lidx_t roffs, ghost_lidx_t coffs))
{
    FUNCNAME(malloc(vec));
    
    if (vec2->traits.storage == vec->traits.storage) { 
        if (vec->traits.flags & GHOST_DENSEMAT_DEVICE) {
            if (vec2->traits.flags & GHOST_DENSEMAT_DEVICE) {
                if (!(vec->traits.flags & GHOST_DENSEMAT_SCATTERED) && !(vec2->traits.flags & GHOST_DENSEMAT_SCATTERED) &&
                    (vec->traits.ncols == vec->traits.ncolsorig) && (vec2->traits.ncols == vec2->traits.ncolsorig) &&
                    (vec->traits.nrows == vec->traits.nrowsorig) && (vec2->traits.nrows == vec2->traits.nrowsorig)) {
                        ghost_cu_memcpy(DENSEMAT_CUVAL(vec,0,0),DENSEMAT_CUVAL(vec2,roffs,coffs),vec->traits.nrowspadded*vec->traits.ncolspadded*vec->elSize);
                } else {
                    PERFWARNING_LOG("Potentially slow element-wise copy!");
                    DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                            ghost_cu_memcpy(cuvalptr1,cuvalptr2,vec->elSize));
                }
            } else {
                PERFWARNING_LOG("Potentially slow element-wise copy! (Fast copying not yet implemented)");
                DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                        ghost_cu_upload(cuvalptr1,valptr2,vec->elSize));
            }
        } else {
            if (vec2->traits.flags & GHOST_DENSEMAT_DEVICE) {
                PERFWARNING_LOG("Potentially slow element-wise copy! (Fast copying not yet implemented)");
                DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                        ghost_cu_download(valptr1,cuvalptr2,vec->elSize));
            } else {
                DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                        *(v_t *)valptr1 = *(v_t *)valptr2);
            }
        }
    } else {
        INFO_LOG("On-the-fly memtranpose");
        if (vec->traits.flags & GHOST_DENSEMAT_DEVICE || 
                vec2->traits.flags & GHOST_DENSEMAT_DEVICE) {
            ERROR_LOG("fromVec with memtranspose not available for GPU!");
            return GHOST_ERR_NOT_IMPLEMENTED;
        }
        if (vec2->traits.flags & GHOST_DENSEMAT_SCATTERED) {
            ERROR_LOG("Not implemented!");
            return GHOST_ERR_NOT_IMPLEMENTED;
        }

        DENSEMAT_ITER2_COMPACT_OFFS_TRANSPOSED(vec,vec2,roffs,coffs,*(v_t *)valptr1 = *(v_t *)valptr2);
    }

    vec->traits.flags |= (ghost_densemat_flags_t)(vec2->traits.flags & GHOST_DENSEMAT_PERMUTED);

    return GHOST_SUCCESS;
}



extern "C" ghost_error_t FUNCNAME(string_selector(ghost_densemat_t *vec, char **str))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(string_tmpl),str,vec);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(normalize_selector(ghost_densemat_t *vec))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(normalize_tmpl),vec);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(dotprod_selector(ghost_densemat_t *vec, void *res, ghost_densemat_t *vec2)) 
{
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(dotprod_tmpl),vec,res,vec2);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(vscale_selector(ghost_densemat_t *vec, void *scale)) 
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(vscale_tmpl),vec,scale);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(vaxpy_selector(ghost_densemat_t *vec, ghost_densemat_t *vec2, void *scale))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(vaxpy_tmpl),vec,vec2,scale);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(vaxpby_selector(ghost_densemat_t *vec, ghost_densemat_t *vec2, void *scale, void *b))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(vaxpby_tmpl),vec,vec2,scale,b);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(fromRand_selector(ghost_densemat_t *vec))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(fromRand_tmpl),vec);

    return ret;
}


extern "C" ghost_error_t FUNCNAME(fromScalar_selector(ghost_densemat_t *vec, void *val))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(fromScalar_tmpl),vec,val);

    return ret;
}

extern "C" ghost_error_t FUNCNAME(fromVec_selector(ghost_densemat_t *vec, ghost_densemat_t *vec2, ghost_lidx_t roffs, ghost_lidx_t coffs))
{ 
    ghost_error_t ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,ghost_complex,ret,FUNCNAME(fromVec_tmpl),vec,vec2,roffs,coffs);

    return ret;
}
