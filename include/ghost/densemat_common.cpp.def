#include "ghost/config.h"
#include "ghost/omp.h"

#ifdef GHOST_HAVE_MPI
#include <mpi.h> //mpi.h has to be included before stdio.h
#endif
#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <complex>
#include <stdio.h>
#ifdef GHOST_HAVE_OPENMP
#include <omp.h>
#endif

#include "ghost/rand.h"
#include "ghost/util.h"
#include "ghost/densemat_cm.h"
#include "ghost/densemat_rm.h"
#include "ghost/math.h"
#include "ghost/locality.h"
#include "ghost/log.h"
#include "ghost/machine.h"
#include "ghost/compatibility_check.h"
#include "ghost/cpp11_fixes.h"

#define DENSEMAT_DT v_t
#include "ghost/densemat_iter_macros.h"

#ifdef ROWMAJOR
#ifdef COLMAJOR
#error "Only one of ROWMAJOR or COLMAJOR must be defined!"
#endif
#define PREFIX rm
#define GHOST_DENSEMAT_SCATTERED_ROWS GHOST_DENSEMAT_SCATTERED_TR
#define GHOST_DENSEMAT_SCATTERED_COLS GHOST_DENSEMAT_SCATTERED_LD
#elif defined (COLMAJOR)
#define PREFIX cm
#define GHOST_DENSEMAT_SCATTERED_ROWS GHOST_DENSEMAT_SCATTERED_LD
#define GHOST_DENSEMAT_SCATTERED_COLS GHOST_DENSEMAT_SCATTERED_TR
#else
#error "One of ROWMAJOR or COLMAJOR must be defined!"
#endif


#define PASTER(x,y) x ## _ ## y
#define EVALUATOR(x,y) PASTER(x,y)
#define FUNCNAME(fun) EVALUATOR(ghost_densemat,EVALUATOR(PREFIX,fun))


    template<typename v_t>
static ghost_error FUNCNAME(normalize_tmpl(ghost_densemat *vec))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH);
    ghost_error ret = GHOST_SUCCESS;
    ghost_lidx v;
    v_t *s = NULL;

    GHOST_CALL_GOTO(ghost_malloc((void **)&s,vec->traits.ncols*sizeof(v_t)),err,ret);
    GHOST_CALL_GOTO(ghost_dot(s,vec,vec),err,ret);

    for (v=0; v<vec->traits.ncols; v++) {
        s[v] = (v_t)sqrt(s[v]);
        s[v] = (v_t)(((v_t)1.)/s[v]);
    }
    GHOST_CALL_GOTO(ghost_vscale(vec,s),err,ret);

    goto out;
err:

out:
    free(s);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(dotprod_tmpl(ghost_densemat *vec, void *res, ghost_densemat *vec2))
{ 
    // the parallelization is done manually because reduction does not work with std::complex numbers

    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    ghost_error ret = GHOST_SUCCESS;
    int nthreads, i;

    if (DENSEMAT_SINGLECOL_STRIDE1(vec) && DENSEMAT_SINGLECOL_STRIDE1(vec2) && DM_NROWS(vec) == DM_NROWS(vec->src) && DM_NROWS(vec2) == DM_NROWS(vec2->src)) {
        GHOST_INSTR_START("fast_singlecol"); 
        v_t * v1 = (v_t *)vec->val;
        v_t * v2 = (v_t *)vec2->val;
        ((v_t *)res)[0] = 0;
        ghost_lidx row;
        if (v1 == v2) {
#pragma omp parallel
            {
                v_t result = 0.;
#pragma omp for schedule(runtime)
                for (row=0; row<DM_NROWS(vec); row++) {
                    result += ghost::conj(*(v1+row)) * v1[row];
                }

#pragma omp critical
                ((v_t *)res)[0] += result;
            }
        } else {
#pragma omp parallel
            {
                v_t result = 0.;
#pragma omp for schedule(runtime)
                for (row=0; row<DM_NROWS(vec); row++) {
                    result += ghost::conj(*(v1+row)) * v2[row];
                }

#pragma omp critical
                ((v_t *)res)[0] += result;
            }
        }
        GHOST_INSTR_STOP("fast_singlecol"); 
    } else {
        v_t *partsums;
        unsigned clsize;

#pragma omp parallel
        {
#pragma omp single
            nthreads = ghost_omp_nthread();
        }

        ghost_machine_cacheline_size(&clsize);
        int padding = (8*(int)clsize)/sizeof(v_t);
        int ncolsPadded = PAD(vec->traits.ncols,padding);

        GHOST_CALL_GOTO(ghost_malloc_align((void **)&partsums,nthreads*ncolsPadded*sizeof(v_t),64),err,ret);
        memset(partsums,0,nthreads*ncolsPadded*sizeof(v_t));
        if (vec == vec2) {
#pragma omp parallel shared(partsums) 
            {
                int tid = ghost_omp_threadnum();
                DENSEMAT_ITER(vec,
                        partsums[ncolsPadded*tid+col] += ghost::conj(*valptr) * *valptr);
            }
        }else {
#pragma omp parallel shared(partsums) 
            {
                int tid = ghost_omp_threadnum();
                DENSEMAT_ITER2(vec,vec2,
                        partsums[ncolsPadded*tid+col] += ghost::conj(*valptr1) * *valptr2);
            }
        }
        ghost_lidx col;
        for (col=0; col<vec->traits.ncols; col++) {
            ((v_t *)res)[col] = 0.;

            for (i=0; i<nthreads; i++) {
                ((v_t *)res)[col] += partsums[i*ncolsPadded+col];
            }
        }
        free(partsums);
    }


    goto out;
err:

out:

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(norm_tmpl(ghost_densemat *vec, void *res, void *p))
{ 
    // the parallelization is done manually because reduction does not work with std::complex numbers

    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    ghost_error ret = GHOST_SUCCESS;
    int nthreads, i;
    v_t *partsums;
    unsigned clsize;

#pragma omp parallel
    {
#pragma omp single
        nthreads = ghost_omp_nthread();
    }

    ghost_machine_cacheline_size(&clsize);
    int padding = 8*(int)clsize/sizeof(v_t);

    GHOST_CALL_GOTO(ghost_malloc_align((void **)&partsums,nthreads*(vec->traits.ncols+padding)*sizeof(v_t),64),err,ret);
    memset(partsums,0,nthreads*(vec->traits.ncols+padding)*sizeof(v_t));

#pragma omp parallel shared(partsums) 
    {
        int tid = ghost_omp_threadnum();
        DENSEMAT_ITER(vec,partsums[(padding+vec->traits.ncols)*tid+col] += std::pow(*(v_t *)valptr * 
                    ghost::conj(*(v_t *)valptr),*(v_t *)p));
    }

    ghost_lidx col;
    for (col=0; col<vec->traits.ncols; col++) {
        ((v_t *)res)[col] = 0.;

        for (i=0; i<nthreads; i++) {
            ((v_t *)res)[col] += partsums[i*(vec->traits.ncols+padding)+col];
        }
    }

    goto out;
err:

out:
    free(partsums);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(vaxpy_tmpl(ghost_densemat *vec, ghost_densemat *vec2, void *scale))
{
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
 
    ghost_error ret = GHOST_SUCCESS;
 
    //////////////// check compatibility /////////////
    ghost_compatible_vec_vec check = GHOST_COMPATIBLE_VEC_VEC_INITIALIZER;
    check.OUT = vec;
    check.C = vec2;
  
    ret = ghost_check_vec_vec_compatibility(&check);
    ///////////////////////////////////////////////////
 
    
    v_t *s = (v_t *)scale;

    DENSEMAT_ITER2(vec,vec2,*(v_t *)valptr1 += *(v_t *)valptr2 * s[col]);

#ifdef GHOST_INSTR_TIMING
    ghost_axpy_perf_args pargs;
    pargs.ncols = vec->traits.ncols;
    pargs.globnrows = vec->map->gdim;
    pargs.dt = vec->traits.datatype;

    ghost_timing_set_perfFunc(NULL,__ghost_functag,ghost_axpy_perf,(void *)&pargs,sizeof(pargs),GHOST_AXPY_PERF_UNIT);
#endif
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(vaxpby_tmpl(ghost_densemat *vec, ghost_densemat *vec2, void *scale, void *b_))
{
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    ghost_error ret = GHOST_SUCCESS;
 
    //////////////// check compatibility /////////////
    ghost_compatible_vec_vec check = GHOST_COMPATIBLE_VEC_VEC_INITIALIZER;
    check.OUT = vec;
    check.C = vec2;
  
    ret = ghost_check_vec_vec_compatibility(&check);
    ///////////////////////////////////////////////////
 
    v_t *s = (v_t *)scale;
    v_t *b = (v_t *)b_;

    DENSEMAT_ITER2(vec,vec2,*(v_t *)valptr1 = *(v_t *)valptr2 * s[col] + 
            *(v_t *)valptr1 * b[col]);

#ifdef GHOST_INSTR_TIMING
    ghost_axpby_perf_args pargs;
    pargs.ncols = vec->traits.ncols;
    pargs.globnrows = vec->map->gdim;
    pargs.dt = vec->traits.datatype;

    ghost_timing_set_perfFunc(NULL,__ghost_functag,ghost_axpby_perf,(void *)&pargs,sizeof(pargs),GHOST_AXPBY_PERF_UNIT);
#endif
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(vaxpbypcz_tmpl(ghost_densemat *vec, ghost_densemat *vec2, void *scale, void *b_, ghost_densemat *vec3, void *c_))
{
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec2);
    GHOST_DENSEMAT_CHECK_SIMILARITY(vec,vec3);
    if (!DENSEMAT_COMPACT(vec) || !DENSEMAT_COMPACT(vec2) ||!DENSEMAT_COMPACT(vec3)) {
        ERROR_LOG("(V)AXPBYCZ not yet implemented for scattered densemats");
    }
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    v_t *s = (v_t *)scale;
    v_t *b = (v_t *)b_;
    v_t *c = (v_t *)c_;


    DENSEMAT_ITER(vec,*(v_t *)valptr = *(v_t *)valptr * b[col] + 
            *(v_t *)DENSEMAT_VALPTR(vec2,row,col) * s[col] + *(v_t *)DENSEMAT_VALPTR(vec3,row,col) * c[col]);

#ifdef GHOST_INSTR_TIMING
    ghost_axpbypcz_perf_args pargs;
    pargs.ncols = vec->traits.ncols;
    pargs.globnrows = vec->map->gdim;
    pargs.dt = vec->traits.datatype;

    ghost_timing_set_perfFunc(NULL,__ghost_functag,ghost_axpbypcz_perf,(void *)&pargs,sizeof(pargs),GHOST_AXPBYPCZ_PERF_UNIT);
#endif
    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

    template<typename v_t> 
static ghost_error FUNCNAME(vscale_tmpl(ghost_densemat *vec, void *scale))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    DENSEMAT_ITER(vec,*(v_t *)valptr *= ((v_t *)scale)[col]);

#ifdef GHOST_INSTR_TIMING
    ghost_scale_perf_args pargs;
    pargs.ncols = vec->traits.ncols;
    pargs.globnrows = vec->map->gdim;
    pargs.dt = vec->traits.datatype;

    ghost_timing_set_perfFunc(NULL,__ghost_functag,ghost_scale_perf,(void *)&pargs,sizeof(pargs),GHOST_SCALE_PERF_UNIT);
#endif

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

    template<typename v_t> 
static ghost_error FUNCNAME(conj_tmpl(ghost_densemat *vec))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);

    DENSEMAT_ITER(vec,*(v_t *)valptr = ghost::conj(*(v_t *)valptr));

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_MATH|GHOST_FUNCTYPE_KERNEL);
    return GHOST_SUCCESS;
}

template<> ghost_error FUNCNAME(conj_tmpl<double>(ghost_densemat *vec))
{
    UNUSED(vec);
    return GHOST_SUCCESS; 
}
template<> ghost_error FUNCNAME(conj_tmpl<float>(ghost_densemat *vec))
{
    UNUSED(vec);
    return GHOST_SUCCESS; 
}

// thread-safe type generic random function, returns pseudo-random numbers between -1 and 1.
    template <typename v_t>
static inline void my_rand(unsigned int* state, v_t* result)
{
    // default implementation
    static const v_t scal = (v_t)2.0/(v_t)RAND_MAX;
    static const v_t shift=(v_t)(-1.0);
    *result=(v_t)rand_r(state)*scal+shift;
}

    template <typename float_type>
static void my_rand(unsigned int* state, std::complex<float_type>* result)
{
    float_type* ft_res = (float_type*)result;
    my_rand(state,&ft_res[0]);
    my_rand(state,&ft_res[1]);
}

template<typename v_t>
struct ghost_densemat_perment_t {
    v_t val;
    ghost_gidx pidx;
};

    template <typename v_t> 
static int densemat_perment_cmp (const void *a, const void *b)
{
    return ((ghost_densemat_perment_t<v_t> *)a)->pidx - ((ghost_densemat_perment_t<v_t> *)b)->pidx;

}


    template <typename v_t> 
static ghost_error FUNCNAME(permute_tmpl(ghost_densemat *vec, ghost_permutation_direction dir))
{

    if(vec->map == NULL) {
        ERROR_LOG("No active map in the densemat, therefore no permutation is carried out.");
    } else {
        if (!vec->map->loc_perm && !vec->map->glb_perm) {
            WARNING_LOG("No permutation vector present!");
            return GHOST_SUCCESS;
        }
        if (!(vec->traits.location & GHOST_LOCATION_HOST)) {
            ERROR_LOG("Permutation not yet implemented for device-only densemats!");
            return GHOST_ERR_NOT_IMPLEMENTED;
        }

        if ((vec->traits.flags & (ghost_densemat_flags)GHOST_DENSEMAT_PERMUTED) && dir == GHOST_PERMUTATION_ORIG2PERM) {
            WARNING_LOG("The densemat is already permuted and should not be permuted in this direction again!");
        }
        if (!(vec->traits.flags & (ghost_densemat_flags)GHOST_DENSEMAT_PERMUTED) && dir == GHOST_PERMUTATION_PERM2ORIG) {
            WARNING_LOG("The densemat is not yet permuted and should not be permuted back!");
        }

        GHOST_CALL_RETURN(ghost_densemat_download(vec));

        if (dir == GHOST_PERMUTATION_PERM2ORIG && vec->map->loc_perm) {
            ghost_densemat *vecclone;
            ghost_densemat_clone(&vecclone,vec,vec->traits.ncols,0);
            ghost_densemat_download(vecclone);

            if(ghost_omp_in_parallel()) {
#pragma omp for
                for(int i=0; i<DM_NROWS(vec); ++i) {
                    for(int col =0; col<vec->traits.ncols; ++col) {
                        if(vec->map->loc_perm[i] < DM_NROWS(vec)) {
                            ((v_t*)vec->val)[i*vec->traits.ncols+col] = ((v_t*)vecclone->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col];
                        } else {
                            ((v_t*)vec->val)[i*vec->traits.ncols+col] = ((v_t*)vecclone->val)[(vec->map->loc_perm[vec->map->loc_perm[i]])*vec->traits.ncols+col];//this element value is zero and it goes to the place where halo would have been permuted to;
                        }
                    } 
                }
            } else {
#pragma omp parallel for
                for(int i=0; i<DM_NROWS(vec); ++i) {
                    for(int col =0; col<vec->traits.ncols; ++col) {
                        if(vec->map->loc_perm[i] < DM_NROWS(vec)) {
                            ((v_t*)vec->val)[i*vec->traits.ncols+col] = ((v_t*)vecclone->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col];
                        } else {
                            ((v_t*)vec->val)[i*vec->traits.ncols+col] = ((v_t*)vecclone->val)[(vec->map->loc_perm[vec->map->loc_perm[i]])*vec->traits.ncols+col];//this element value is zero and it goes to the place where halo would have been permuted to;
                        } 
                    }
                }
            }

            //DENSEMAT_ITER(vec,*valptr = *(v_t *)DENSEMAT_VALPTR(vecclone,vec->map->loc_perm[row],col));
            ghost_densemat_destroy(vecclone);
            GHOST_CALL_RETURN(ghost_densemat_upload(vec));
        }

        if (vec->map->glb_perm) {
#ifdef GHOST_HAVE_MPI
            ghost_lidx i,c;
            MPI_Request *req;
            ghost_malloc((void **)&req,DM_NROWS(vec)*2*sizeof(MPI_Request));

            ghost_densemat *vecclone;
            ghost_densemat_clone(&vecclone,vec,vec->traits.ncols,0);
            ghost_densemat_download(vecclone);
            int dstrank,srcrank;
            ghost_lidx rowindst;
            for (c=0; c<vec->traits.ncols; c++) {
                for (i=0; i<DM_NROWS(vec); i++) {
                    if (dir == GHOST_PERMUTATION_ORIG2PERM) {
                        dstrank = ghost_rank_of_row(vec->map,vec->map->glb_perm[i]);
                        srcrank = ghost_rank_of_row(vec->map,vec->map->glb_perm_inv[i]);
                        rowindst = vec->map->glb_perm[i]-vec->map->goffs[dstrank];
                    } else {
                        dstrank = ghost_rank_of_row(vec->map,vec->map->glb_perm_inv[i]);
                        srcrank = ghost_rank_of_row(vec->map,vec->map->glb_perm[i]);
                        rowindst = vec->map->glb_perm_inv[i]-vec->map->goffs[dstrank];
                    }

                    MPI_Isend(DENSEMAT_VALPTR(vecclone,i,c),1,vec->mpidt,dstrank,rowindst,vec->map->mpicomm,&req[i]);
                    MPI_Irecv(DENSEMAT_VALPTR(vec,i,c),1,vec->mpidt,srcrank,i,vec->map->mpicomm,&req[DM_NROWS(vec)+i]);
                }
                MPI_Waitall(2*DM_NROWS(vec),req,MPI_STATUS_IGNORE);
            }
            free(req);
            ghost_densemat_destroy(vecclone);
            GHOST_CALL_RETURN(ghost_densemat_upload(vec));
#else
            ERROR_LOG("There should not be a global permutation in case MPI is disabled!");
#endif
        } 
        if (dir == GHOST_PERMUTATION_ORIG2PERM && vec->map->loc_perm) {
            ghost_densemat *vecclone;
            ghost_densemat_clone(&vecclone,vec,vec->traits.ncols,0);
            ghost_densemat_download(vecclone);       


            if (vec->map->flags & GHOST_PERM_NO_DISTINCTION) {
                WARNING_LOG("This will probably not work for views or non-standard densemats.");
                //FIXME Fix this
                //Accessing invPerm would be a problem if GHOST_PERM_NO_DISTINCTION is ON
                if(ghost_omp_in_parallel()) {
#pragma omp for
                    for(int i=0; i<DM_NROWS(vec); ++i) {
                        for(int col =0; col<vec->traits.ncols; ++col) {
                            if(vec->map->loc_perm[i] < DM_NROWS(vec)) {
                                ((v_t*)vec->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
                            } else {
                                ((v_t*)vec->val)[(vec->map->loc_perm[vec->map->loc_perm[i]])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
                            }
                        }
                    }
                } else {
#pragma omp parallel for
                    for(int i=0; i<DM_NROWS(vec); ++i) {
                        for(int col =0; col<vec->traits.ncols; ++col) {
                            if(vec->map->loc_perm[i] < DM_NROWS(vec)) { 
                                ((v_t*)vec->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
                            } else {
                                ((v_t*)vec->val)[(vec->map->loc_perm[vec->map->loc_perm[i]])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
                            }
                        }
                    }
                }
            } else {
                DENSEMAT_ITER(vec, *valptr = *(v_t *)DENSEMAT_VALPTR(vecclone,vec->map->loc_perm_inv[row],col)); //this would yield seg fault
            }
            //DENSEMAT_ITER(vec, *valptr = *(v_t *)DENSEMAT_VALPTR(vecclone,vec->map->loc_perm_inv[row],col)); //this would yield seg fault
            /*
               if (ctx->flags & GHOST_PERM_NO_DISTINCTION) {
            //Accessing invPerm would be a problem if GHOST_PERM_NO_DISTINCTION is ON
            if(ghost_omp_in_parallel()) {
            for(int i=0; i<DM_NROWS(vec); ++i) {
            for(int col =0; col<vec->traits.ncols; ++col) {
            ((v_t*)vec->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
            }
            }
            } else {
#pragma omp parallel for
for(int i=0; i<DM_NROWS(vec); ++i) {
for(int col =0; col<vec->traits.ncols; ++col) {
((v_t*)vec->val)[(vec->map->loc_perm[i])*vec->traits.ncols+col] = ((v_t*)vecclone->val)[i*vecclone->traits.ncols+col];
}
}
}
} else {
DENSEMAT_ITER(vec, *valptr = *(v_t *)DENSEMAT_VALPTR(vecclone,vec->map->loc_perm_inv[row],col)); //this would yield seg fault
}
*/
ghost_densemat_destroy(vecclone);
GHOST_CALL_RETURN(ghost_densemat_upload(vec));
}

if (dir == GHOST_PERMUTATION_ORIG2PERM) {
    vec->traits.flags |= (ghost_densemat_flags)GHOST_DENSEMAT_PERMUTED;
}
else {
    vec->traits.flags &= (ghost_densemat_flags)(~GHOST_DENSEMAT_PERMUTED);
}
}

return GHOST_SUCCESS;
}

    template <typename v_t> 
static ghost_error FUNCNAME(fromRand_tmpl(ghost_densemat *vec))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);

    int needInit = 0;
    FUNCNAME(malloc(vec,&needInit));
#ifdef GHOST_HAVE_OPENMP
    omp_sched_t omp_sched;
    int omp_sched_mod;
    omp_get_schedule(&omp_sched,&omp_sched_mod);
    if (ghost_rand_customseed() && (omp_sched != omp_sched_static)) {
        WARNING_LOG("A custom random seed has been set but the OpenMP scheduling is not STATIC. This may lead to unexpected results!");
    }
#endif

#pragma omp parallel
    {
        unsigned int *state;
        ghost_rand_get(&state);
        if( needInit ) {
            DENSEMAT_ITER_INIT(vec,my_rand(state,(v_t *)valptr));
        } else {
            DENSEMAT_ITER(vec,my_rand(state,(v_t *)valptr));
        }
    }
    
    if (vec->map->loc_perm || vec->map->glb_perm) {
        vec->traits.flags |= GHOST_DENSEMAT_PERMUTED;
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    return GHOST_SUCCESS;
}

    template <typename v_t> 
static ghost_error FUNCNAME(fromScalar_tmpl(ghost_densemat *vec, void *val))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);

    int needInit = 0;
    FUNCNAME(malloc(vec,&needInit));
    if( needInit ) {
        DENSEMAT_ITER_INIT(vec,*(v_t *)valptr = *(v_t *)val);
    } else {
        DENSEMAT_ITER(vec,*(v_t *)valptr = *(v_t *)val);
    }
    
    if (vec->map->loc_perm || vec->map->glb_perm) {
        vec->traits.flags |= GHOST_DENSEMAT_PERMUTED;
    }

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);

    return GHOST_SUCCESS;
}


    template <typename v_t> 
static ghost_error FUNCNAME(string_tmpl(char **str, ghost_densemat *vec))
{
    std::stringstream buffer;
    buffer << std::setprecision(6)
        << std::right
        << std::scientific;

    ghost_densemat_download(vec);
    GHOST_SINGLETHREAD(DENSEMAT_ITER(vec,buffer<<*(v_t *)valptr<<(col==vec->traits.ncols-1?"\n":"\t")));

    GHOST_CALL_RETURN(ghost_malloc((void **)str,buffer.str().length()+1));
    strcpy(*str,buffer.str().c_str());

    return GHOST_SUCCESS;
}

    template <typename v_t> 
static ghost_error FUNCNAME(fromVec_tmpl(ghost_densemat *vec, ghost_densemat *vec2, ghost_lidx roffs, ghost_lidx coffs))
{
    ghost_error ret = GHOST_SUCCESS;

    //////////////// check compatibility /////////////
    //ghost_compatible_vec_init check = GHOST_COMPATIBLE_VEC_INIT_INITIALIZER;
    //check.OUT_A = vec;
    //check.IN_A = vec2;

    //ret = ghost_check_vec_init_compatibility(&check);
    ///////////////////////////////////////////////////
 
/*  //////////////// check compatibility /////////////
    if (vec->map->dim == vec2->map->dim) { // only check if we want to initialize a block vector from another
        ghost_compatible_vec_vec check = GHOST_COMPATIBLE_VEC_VEC_INITIALIZER;
        check.OUT = vec;
        check.C = vec2;
      
        ret = ghost_check_vec_vec_compatibility(&check);
    }
   ///////////////////////////////////////////////////
*/ 
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);
    int needInit = 0;
    FUNCNAME(malloc(vec,&needInit));
    if( needInit && (vec->traits.location & GHOST_LOCATION_HOST) ) {
        if( vec->traits.ncolspadded != vec->traits.ncols || DM_NROWSPAD(vec) != DM_NROWS(vec) || roffs != 0 ) {
            PERFWARNING_LOG("Fast initializing of padded vector block from another vector not implemented, filling with zeros first");
            DENSEMAT_ITER_INIT(vec,memset(valptr,0,sizeof(v_t)));
        }
    }



    if (vec2->traits.storage == vec->traits.storage) { 
        if (vec->traits.location & GHOST_LOCATION_DEVICE) {
            if (vec2->traits.location & GHOST_LOCATION_DEVICE) {
                if (DENSEMAT_COMPACT(vec) && DENSEMAT_COMPACT(vec2)) {
                    ghost_cu_memcpy2d(vec->cu_val,vec->stride*vec->elSize,DENSEMAT_CUVALPTR(vec2,roffs,coffs),vec2->stride*vec->elSize,vec->blocklen*vec->elSize,vec->nblock);
                } else {
                    PERFWARNING_LOG("Potentially slow element-wise memcpy!");
                    DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                            ghost_cu_memcpy(cuvalptr1,cuvalptr2,vec->elSize));
                }
            } else {
                if (DENSEMAT_COMPACT(vec) && DENSEMAT_COMPACT(vec2)) {
                    ghost_cu_upload2d(vec->cu_val,vec->stride*vec->elSize,DENSEMAT_VALPTR(vec2,roffs,coffs),vec2->stride*vec2->elSize,vec2->blocklen*vec2->elSize,vec2->nblock);
                } else {
                    PERFWARNING_LOG("Potentially slow element-wise upload! (Fast copying not yet implemented)");
                    DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                            ghost_cu_upload(cuvalptr1,valptr2,vec->elSize));
                }
            }
        } else {
            if (vec2->traits.location & GHOST_LOCATION_DEVICE) {
                if (DENSEMAT_COMPACT(vec) && DENSEMAT_COMPACT(vec2)) {
                    ghost_cu_download2d(vec->val,vec->stride*vec->elSize,DENSEMAT_CUVALPTR(vec2,roffs,coffs),vec2->stride*vec2->elSize,vec2->blocklen*vec2->elSize,vec2->nblock);
                } else {
                    PERFWARNING_LOG("Potentially slow element-wise download! (Fast copying not yet implemented)");
                    DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                            ghost_cu_download(valptr1,cuvalptr2,vec->elSize));
                }
            } else {
                DENSEMAT_ITER2_OFFS(vec,vec2,roffs,coffs,
                        *(v_t *)valptr1 = *(v_t *)valptr2);
            }
        }
    } else {
#if defined(COLMAJOR)
        INFO_LOG("On-the-fly memtranpose RM -> CM");
#else
        INFO_LOG("On-the-fly memtranpose CM -> RM");
#endif
        if (!(vec->traits.location & vec2->traits.location)) {
            ERROR_LOG("Inter-device memtranspose not yet implemented!");
            return GHOST_ERR_NOT_IMPLEMENTED;
        }
        if (vec2->traits.flags & GHOST_DENSEMAT_SCATTERED) {
            ERROR_LOG("Not implemented!");
            return GHOST_ERR_NOT_IMPLEMENTED;
        }

        if (vec->traits.location & GHOST_LOCATION_DEVICE && 
                vec2->traits.location & GHOST_LOCATION_DEVICE) {
#ifdef GHOST_HAVE_CUDA
            ghost_lidx m,n;
#if defined(COLMAJOR)
            m = DM_NROWS(vec);
            n = vec->traits.ncols;
#elif defined(ROWMAJOR)
            m = vec->traits.ncols;
            n = DM_NROWS(vec);
#else
#error "Neither ROWMAJOR nor COLMAJOR defined!"
#endif
            GHOST_CALL_RETURN(ghost_cu_memtranspose(m,n,vec->cu_val,vec->stride,vec2->cu_val,vec2->stride,vec->traits.datatype));
#endif
        } else {
            DENSEMAT_ITER2_COMPACT_OFFS_TRANSPOSED(vec,vec2,roffs,coffs,*(v_t *)valptr1 = *(v_t *)valptr2);
        }
    }

    vec->traits.flags |= (ghost_densemat_flags)(vec2->traits.flags & GHOST_DENSEMAT_PERMUTED);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    return ret;
}

    template <typename v_t> 
static ghost_error FUNCNAME(fromReal_tmpl(ghost_densemat *vec, ghost_densemat *re, ghost_densemat *im))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);

    GHOST_DENSEMAT_CHECK_SIMILARITY(re,im);

    ghost_error ret = GHOST_SUCCESS;
    //////////////// check compatibility /////////////
    ghost_compatible_vec_init check = GHOST_COMPATIBLE_VEC_INIT_INITIALIZER;
    check.IN_A = re;
    check.IN_B = im;
    check.OUT_A = vec;
  
    ret = ghost_check_vec_init_compatibility(&check);
    ///////////////////////////////////////////////////
 
 
    int needInit = 0;
    FUNCNAME(malloc(vec,&needInit));

    if( needInit && (vec->traits.location & GHOST_LOCATION_HOST) ) {
        PERFWARNING_LOG("Fast initialization of padding elements not supported for ITER2* macros, filling with zeros first");
        DENSEMAT_ITER_INIT(vec,(*(std::complex<v_t> *)valptr) = 0.);
    }

    ghost_densemat_download(re);
    ghost_densemat_download(im);

    DENSEMAT_ITER2(vec,re,std::complex<v_t> tmp(*(v_t *)valptr2, (*(((v_t *)im->val+(valptr2-(v_t *)re->val)))));(*((std::complex<v_t> *)(vec->val+2*((char *)valptr1-vec->val)))) = tmp;);

    ghost_densemat_upload(vec);

    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    return ret;

}

    template <typename v_t> 
static ghost_error FUNCNAME(fromComplex_tmpl(ghost_densemat *re, ghost_densemat *im, ghost_densemat *c))
{
    GHOST_FUNC_ENTER(GHOST_FUNCTYPE_INITIALIZATION);

    GHOST_DENSEMAT_CHECK_SIMILARITY(re,im);
    
    ghost_error ret = GHOST_SUCCESS;

    //////////////// check compatibility /////////////
    ghost_compatible_vec_init check = GHOST_COMPATIBLE_VEC_INIT_INITIALIZER;
    check.IN_A = c;
    check.OUT_A = re;
    check.OUT_B = im;
  
    ret = ghost_check_vec_init_compatibility(&check);
    ///////////////////////////////////////////////////
 
    int needInit = 0;
    FUNCNAME(malloc(re,&needInit));

    if( needInit && (re->traits.location & GHOST_LOCATION_HOST) ) {
        PERFWARNING_LOG("Fast initialization of padding elements not supported for ITER2* macros, filling with zeros first");
        DENSEMAT_ITER_INIT(re,*(v_t *)valptr = 0.;);
    }

    needInit = 0;
    FUNCNAME(malloc(re,&needInit));

    if( needInit && (im->traits.location & GHOST_LOCATION_HOST) ) {
        PERFWARNING_LOG("Fast initialization of padding elements not supported for ITER2* macros, filling with zeros first");
        DENSEMAT_ITER_INIT(im,*(v_t *)valptr = 0.;);
    }

    ghost_densemat_download(c);

    DENSEMAT_ITER2(re,c,*(v_t *)valptr1 = real((*((std::complex<v_t> *)(c->val+2*((char *)valptr2-c->val)))));*(((v_t *)im->val+(valptr1-(v_t *)re->val))) = imag((*((std::complex<v_t> *)(c->val+2*((char *)valptr2-c->val))))););

    ghost_densemat_upload(re);    
    ghost_densemat_upload(im);    


    GHOST_FUNC_EXIT(GHOST_FUNCTYPE_INITIALIZATION);
    return ret;

}


extern "C" ghost_error FUNCNAME(string_selector(ghost_densemat *vec, char **str))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(string_tmpl),str,vec);

    return ret;
}

extern "C" ghost_error FUNCNAME(normalize_selector(ghost_densemat *vec))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(normalize_tmpl),vec);

    return ret;
}

extern "C" ghost_error FUNCNAME(dotprod_selector(ghost_densemat *vec, void *res, ghost_densemat *vec2)) 
{
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(dotprod_tmpl),vec,res,vec2);

    return ret;
}

extern "C" ghost_error FUNCNAME(norm_selector(ghost_densemat *vec, void *res, void *p)) 
{
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(norm_tmpl),vec,res,p);

    return ret;
}

extern "C" ghost_error FUNCNAME(vscale_selector(ghost_densemat *vec, void *scale)) 
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(vscale_tmpl),vec,scale);

    return ret;
}

extern "C" ghost_error FUNCNAME(vaxpy_selector(ghost_densemat *vec, ghost_densemat *vec2, void *scale))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(vaxpy_tmpl),vec,vec2,scale);

    return ret;
}

extern "C" ghost_error FUNCNAME(vaxpby_selector(ghost_densemat *vec, ghost_densemat *vec2, void *scale, void *b))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(vaxpby_tmpl),vec,vec2,scale,b);

    return ret;
}

extern "C" ghost_error FUNCNAME(vaxpbypcz_selector(ghost_densemat *vec, ghost_densemat *vec2, void *scale, void *b, ghost_densemat *vec3, void *c))
{
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(vaxpbypcz_tmpl),vec,vec2,scale,b,vec3,c);

    return ret;
}

extern "C" ghost_error FUNCNAME(fromRand_selector(ghost_densemat *vec))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(fromRand_tmpl),vec);

    return ret;
}

extern "C" ghost_error FUNCNAME(fromScalar_selector(ghost_densemat *vec, void *val))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(fromScalar_tmpl),vec,val);

    return ret;
}

extern "C" ghost_error FUNCNAME(fromVec_selector(ghost_densemat *vec, ghost_densemat *vec2, ghost_lidx roffs, ghost_lidx coffs))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(fromVec_tmpl),vec,vec2,roffs,coffs);

    return ret;
}

extern "C" ghost_error FUNCNAME(permute_selector(ghost_densemat *vec, ghost_permutation_direction dir))
{ 
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(permute_tmpl),vec,dir);

    return ret;
}

extern "C" ghost_error FUNCNAME(conj_selector(ghost_densemat *vec)) 
{
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(vec->traits.datatype,std::complex,ret,FUNCNAME(conj_tmpl),vec);

    return ret;
}

extern "C" ghost_error FUNCNAME(fromReal_selector(ghost_densemat *vec, ghost_densemat *re, ghost_densemat *im))
{
    ghost_error ret = GHOST_SUCCESS;

    if (vec->traits.datatype & GHOST_DT_DOUBLE) {
        ret = FUNCNAME(fromReal_tmpl<double>)(vec,re,im);
    } else {
        ret = FUNCNAME(fromReal_tmpl<float>)(vec,re,im);
    }

    return ret;
}

extern "C" ghost_error FUNCNAME(fromComplex_selector(ghost_densemat *re, ghost_densemat *im, ghost_densemat *c))
{
    ghost_error ret = GHOST_SUCCESS;

    SELECT_TMPL_1DATATYPE(re->traits.datatype,std::complex,ret,FUNCNAME(fromComplex_tmpl),re,im,c);

    return ret;
}
