/**
 * @file map.h
 * @brief Types and functions related to GHOST maps.
 * @author Moritz Kreutzer <moritz.kreutzer@fau.de>
 */
#ifndef GHOST_MAP_H
#define GHOST_MAP_H

#include "config.h"
#include "types.h"
#include "sparsemat_src.h"

typedef enum
{
    GHOST_MAP_NONE,
    GHOST_MAP_ROW,
    GHOST_MAP_COL
} 
ghost_maptype;

/**
 * @brief Possible sources of a sparse matrix. 
 */
typedef enum {
    /**
     * @brief The matrix comes from a binary CRS file.
     */
    GHOST_SPARSEMAT_SRC_FILE,
    /**
     * @brief The matrix comes from a Matrix Market file.
     */
    GHOST_SPARSEMAT_SRC_MM,
    /**
     * @brief The matrix is generated by a function.
     */
    GHOST_SPARSEMAT_SRC_FUNC,
    /**
     * @brief Empty source.
     */
    GHOST_SPARSEMAT_SRC_NONE
} ghost_sparsemat_src;

typedef enum {
    GHOST_MAP_DIST_NNZ,
    GHOST_MAP_DIST_NROWS
} ghost_map_dist_type;
    
typedef enum {
    GHOST_MAP_DEFAULT=0,
    /**
    * @brief Does not make a distinction between local and remote entries if set; this might lead to higher communication time
    */
    GHOST_PERM_NO_DISTINCTION=1,
    /**
     * @brief This map will be free'd. This is to avoid double frees and should not be set by the user!
     */
    GHOST_MAP_WILL_BE_FREED=2
} ghost_map_flags;

typedef struct 
{
    /**
     * @brief The global dimension.
     */
    ghost_gidx gdim;
    /**
     * @brief The offset into ::gdim of each rank.
     */
    ghost_gidx *goffs;
    /**
     * @brief The offset into ::gdim for this rank.
     */
    ghost_gidx offs;
    /**
     * @brief The local dimension of each rank.
     */
    ghost_lidx *ldim;
    /**
     * @brief The local dimension for this rank.
     */
    ghost_lidx dim;
    /**
     * @brief The padded local dimension for this rank.
     */
    ghost_lidx dimpad;
    /**
     * @brief The number of halo elements.
     */
    ghost_lidx nhalo;
    /**
     * @brief The local permutation 
     */
    ghost_lidx *loc_perm;
    /**
     * @brief The local inverse permutation.
     */
    ghost_lidx *loc_perm_inv;
    /**
     * @brief The global permutation.
     */
    ghost_gidx *glb_perm;
    /**
     * @brief The global inverse permutation.
     */
    ghost_gidx *glb_perm_inv;
    /**
     * @brief The local permutation in CUDA memory. 
     */
    ghost_lidx *cu_loc_perm;
    
    ghost_maptype type;

    ghost_mpi_comm mpicomm;
    ghost_map_flags flags;
} 
ghost_map;

#ifdef __cplusplus
extern "C" {
#endif
    ghost_error ghost_map_create_distribution(ghost_map *map, ghost_sparsemat_src_rowfunc *matsrc, ghost_mpi_comm mpicomm, double weight, ghost_map_dist_type distType);
    ghost_error ghost_map_create(ghost_map **map, ghost_gidx gdim, ghost_mpi_comm comm, ghost_maptype type, ghost_map_flags flags);
    /**
     * @brief Create a light map with only a dimension and an MPI communicator.
     *
     * This map is used for non-distributed data
     *
     * @param dim
     * @param mpicomm
     *
     * @return 
     */
    ghost_map *ghost_map_create_light(ghost_lidx dim, ghost_mpi_comm mpicomm);
    void ghost_map_destroy(ghost_map *map);
    int ghost_rank_of_row(ghost_map *map, ghost_gidx row);
#ifdef __cplusplus
}
#endif

#endif
