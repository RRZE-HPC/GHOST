/**
 * @file map.h
 * @brief Types and functions related to GHOST maps.
 * @author Moritz Kreutzer <moritz.kreutzer@fau.de>
 */
#ifndef GHOST_MAP_H
#define GHOST_MAP_H

#include "config.h"
#include "types.h"
#include "sparsemat_src.h"

/**
 * @brief Possible sources of a sparse matrix. 
 */
typedef enum {
    /**
     * @brief The matrix comes from a binary CRS file.
     */
    GHOST_SPARSEMAT_SRC_FILE,
    /**
     * @brief The matrix comes from a Matrix Market file.
     */
    GHOST_SPARSEMAT_SRC_MM,
    /**
     * @brief The matrix is generated by a function.
     */
    GHOST_SPARSEMAT_SRC_FUNC,
    /**
     * @brief Empty source.
     */
    GHOST_SPARSEMAT_SRC_NONE
} ghost_sparsemat_src;

typedef struct 
{
    /**
     * @brief The global dimension.
     */
    ghost_gidx gdim;
    /**
     * @brief The offset into ::gdim of each rank.
     */
    ghost_gidx *goffs;
    /**
     * @brief The offset into ::gdim for this rank.
     */
    ghost_gidx offs;
    /**
     * @brief The local dimension of each rank.
     */
    ghost_lidx *ldim;
    /**
     * @brief The local dimension for this rank.
     */
    ghost_lidx dim;
    /**
     * @brief The padded local dimension for this rank.
     */
    ghost_lidx dimpad;
    /**
     * @brief The local permutation 
     */
    ghost_lidx *loc_perm;
    /**
     * @brief The local inverse permutation.
     */
    ghost_lidx *loc_perm_inv;
    /**
     * @brief The global permutation.
     */
    ghost_gidx *glb_perm;
    /**
     * @brief The global inverse permutation.
     */
    ghost_gidx *glb_perm_inv;
    /**
     * @brief The local permutation in CUDA memory. 
     */
    ghost_lidx *cu_loc_perm;
} 
ghost_map;

typedef enum {
    GHOST_MAP_DIST_NNZ,
    GHOST_MAP_DIST_NROWS
} ghost_map_dist_type;

#ifdef __cplusplus
extern "C" {
#endif
    ghost_error ghost_map_create_distribution(ghost_map *map, ghost_sparsemat_src_rowfunc *matsrc, ghost_mpi_comm mpicomm, double weight, ghost_map_dist_type distType);
    ghost_error ghost_map_create(ghost_map **map, ghost_gidx gdim, ghost_mpi_comm comm);
    void ghost_map_destroy(ghost_map *map);
#ifdef __cplusplus
}
#endif

#endif
