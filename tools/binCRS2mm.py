#!/usr/bin/python

import os
import sys
import numpy
import scipy
import scipy.sparse as sparse
from scipy.io.mmio import mmwrite
from ctypes import *

if len(sys.argv) != 2:
	print("Usage: "+sys.argv[0]+" matrixPath > mmFile");
	print("\tmatrixPath: path to binary CRS file");
	sys.exit(0)
	

infile = open(sys.argv[1],'rb')

endianess = c_int()
fileformatversion = c_int()
base = c_int()
symmetry = c_int()
datatype = c_int()
nrows = c_longlong()
ncols = c_longlong()
nnz = c_longlong()

infile.readinto(endianess)
infile.readinto(fileformatversion)
infile.readinto(base)
infile.readinto(symmetry)
infile.readinto(datatype)
infile.readinto(nrows)
infile.readinto(ncols)
infile.readinto(nnz)

rpt = (c_longlong * (nrows.value+1))()
col = (c_longlong * nnz.value)()

infile.readinto(rpt)
infile.readinto(col)

val = None
			
if datatype.value == 5:
	val = (c_float * nnz.value)()
	infile.readinto(val)
elif datatype.value == 6:
	val = (c_double * nnz.value)()
	infile.readinto(val)
elif datatype.value == 9:
	val = (2 * c_float * nnz.value)()
	infile.readinto(val)
elif datatype.value == 10:
	val = (2 * c_double * nnz.value)()
	infile.readinto(val)

rpt = scipy.array(rpt)
col = scipy.array(col)

if datatype.value & 8:
	values = scipy.array(numpy.zeros(nnz.value),dtype=complex)

	for v in range(0,nnz.value):
		values[v] = complex(val[v][0],val[v][1])
	
	mat = sparse.csr_matrix((values,col,rpt),shape=(nrows.value,ncols.value))
else:
	mat = sparse.csr_matrix((val,col,rpt),shape=(nrows.value,ncols.value))


field = None
prec = None

if datatype.value < 7:
	field = "real"
else:
	field = "complex"

if datatype.value & 1:
	prec = 8
else:
	prec = 16

mmwrite(sys.stdout, mat, "MatrixMarketm file generated by "+
		os.path.basename(__file__)+" from binary CRS file "+
		os.path.basename(sys.argv[1]), field, prec)

